{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Anytype Python Client","text":"<p>Documentation for the develop version</p> <p>This documentation is for the GitHub version and requires the Anytype Alpha version. Install it with: <pre><code>pip install git+https://github.com/charlesneimog/anytype-client\n</code></pre></p> <p> </p> <p>Unofficial Python API for Anytype. Automate workflows and integrate with your apps! \u2728</p>"},{"location":"#features","title":"\ud83d\ude80 Features","text":"<ul> <li>Seamless Integration: Connect Python scripts directly to your Anytype workspace.</li> <li>Object Management: Create, modify, and organize pages, notes, and custom objects.</li> <li>Space Operations: Manage spaces, types, and relations programmatically.</li> <li>Batch Operations: Export data, automate repetitive tasks, and more.</li> <li>PDF Import Example: Bulk import annotated PDFs as structured notes (see examples).</li> </ul>"},{"location":"#contributors","title":"\ud83d\udc65 Contributors","text":""},{"location":"contributing/","title":"\ud83e\udd1d Contributing","text":"<p>Contributions are welcomed! Here's how to help:</p> <ol> <li>Report bugs or request features via Issues</li> <li>Submit pull requests for improvements</li> <li>Share your use cases in Discussions</li> </ol> <p>To run unit tests you will need to <code>pip install pytest</code>.</p> <p>To build the documentation you will need to install <code>mkdocs</code> and associated packages:</p> <p><code>pip install mkdocs mkdocs-material mkdocstrings[python]</code></p> <p>Then from within your project directory, you can run <code>mkdocs serve</code> to start a local HTTP server hosting your copy of the docs. For more information see the <code>mkdocs</code> website.</p>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#hello-world","title":"Hello World","text":"Hello World Example <pre><code>from anytype import Anytype\nfrom anytype import Object\n\n# Need Anytype-0.44.13-beta or higher\n# Auth, on first type you need to type the 4 digit code that will popup on Anytype App\nany = Anytype()\nany.auth()\n\n# Get Spaces\nspaces = any.get_spaces()\nmy_space = spaces[0]\n\n# Create Object on the first space\nnote_type = my_space.get_type(\"Page\")\nnew_object = Object()\nnew_object.name = \"Hello World!\"\nnew_object.icon = \"\ud83d\udc0d\"\nnew_object.description = \"This is an object created from Python Api\"\nnew_object.add_title1(\"Hello\")\nnew_object.add_title2(\"From\")\nnew_object.add_title3(\"Python\")\nnew_object.add_codeblock(\"print('Hello World!')\", language=\"python\")\nnew_object.add_bullet(\"1\")\nnew_object.add_bullet(\"2\")\nnew_object.add_bullet(\"3\")\nnew_object.add_bullet(\"3\")\nnew_object.add_text(\"$x(n) = x + n$\")\n\n# Add to my_space\ncreated_object = my_space.create_object(new_object, note_type)\n</code></pre>"},{"location":"examples/#collection-with-articles-and-all-articles-cited","title":"Collection with articles and all articles cited","text":"Collection with all cited articles <pre><code>import anytype\nimport requests\nimport time\n\nany = anytype.Anytype()\nany.auth()\n\n\nspaces = any.get_spaces()\n\nmyspace = None\nfor space in spaces:\n    if space.name == \"My Space\":\n        myspace = space\n        break\n\nif myspace is None:\n    myspace = any.create_space(\"My Space\")\n\n\narticle_type = None\nfor type in myspace.get_types(offset=0, limit=100):\n    if type.name == \"Artigo\":\n        article_type = type\n\nobjects = myspace.search(\"\", article_type)\n\n# if type does not exist we create it\nif article_type is None:\n    article_type = anytype.Type(\"Artigo\")\n    article_type.icon = anytype.Icon()  # default icon\n    article_type.layout = \"basic\"\n    article_type.plural_name = \"Artigos\"\n\n    article_type.add_property(\"Doi\", anytype.PropertyFormat.TEXT)\n    article_type.add_property(\"Publication Year\", anytype.PropertyFormat.NUMBER)\n    article_type.add_property(\"Authors\", anytype.PropertyFormat.MULTI_SELECT)\n    article_type.add_property(\"Readed\", anytype.PropertyFormat.CHECKBOX)\n    article_type = myspace.create_type(article_type)\n\nassert isinstance(article_type, anytype.Type)\n\n\ntime.sleep(2)\n\n\ndef add_article(doi, recursive=False):\n    url = f\"https://api.crossref.org/works/{doi}\"\n    response = requests.get(url)\n\n    if response.status_code == 200:\n        data = response.json()\n\n        # Article Metadata\n        title = data[\"message\"][\"title\"][0]\n        authors = []\n        for author in data.get(\"message\", {}).get(\"author\", []):\n            if \"given\" not in author or \"family\" not in author:\n                authors.append(author[\"name\"])\n            else:\n                authors.append(f\"{author['given']} {author['family']}\")\n\n        # Year and DOI of the article\n        article_doi = data[\"message\"][\"URL\"]\n        year = data[\"message\"][\"issued\"][\"date-parts\"][0][0]\n\n        # Creating the article object\n        obj = anytype.Object(title, article_type)\n        obj.doi = article_doi\n        authors = [html.unescape(author).title() for author in authors]  # fix encoding\n\n        obj.authors = authors\n        obj.publication_year = year\n        obj.readed = False\n\n        # Handle references (citations)\n        references = data[\"message\"].get(\"reference\", [])\n\n        if recursive:\n            for reference in references:\n                ref_doi = reference.get(\"DOI\", \"\")\n                if ref_doi != \"\":\n                    add_article(ref_doi)\n\n        myspace.create_object(obj)\n        time.sleep(1)\n\n    else:\n        print(f\"Error fetching article data: {response.status_code}\")\n\n\n# Example usage:\ndoi = \"10.1080/17459737.2025.2465976\"\nadd_article(doi, True)\n</code></pre>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#prerequisites","title":"\u2611\ufe0f Prerequisites","text":"<ul> <li>Python 3.10+</li> <li>Anytype desktop app (v0.46.19-alpha or <code>higher</code>) running during authentication</li> </ul>"},{"location":"getting-started/#installation","title":"\ud83d\udce6 Installation","text":"<pre><code>pip install anytype-client\n</code></pre>"},{"location":"getting-started/#quick-start","title":"\u26a1 Quick Start","text":"<ol> <li>Authentication</li> </ol> <p><pre><code>from anytype import Anytype\n\n# Initialize client (first run triggers authentication)\nany = Anytype()\nany.auth()  # \ud83d\udd11 Enter 4-digit code from Anytype app when prompted\n</code></pre> 2. Create Your First Object</p> <pre><code>from anytype import Object\n\n# Get your workspace\nspaces = any.get_spaces()\nmy_space = spaces[0]  # Use your preferred space\n\n# Create a new page\nnote_type = my_space.get_type(\"Page\")\nnew_note = Object()\nnew_note.name = \"My Python-Powered Note \ud83d\udcdd\"\nnew_note.icon = \"\ud83d\udd25\"\nnew_note.description = \"Automatically generated via Python API\"\n\n# Add rich content\nnew_note.add_title1(\"Welcome to Automated Knowledge Management!\")\nnew_note.add_text(\"This section was created programmatically using Python Anytype Client\")\n\n# Commit to workspace\ncreated_object = my_space.create_object(new_note, note_type)\nprint(f\"Created object: {created_object.id}\")\n</code></pre>"},{"location":"getting-started/#examples","title":"\ud83c\udf1f Examples","text":"Example Description Results \ud83d\udcc4 Hello World Create a basic note with formatted text Check Result \ud83d\udcda PDF Notes Importer Batch import annotated PDFs Check Result More examples coming as Anytype API evolves Request a feature \u2694\ufe0f"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#classes","title":"Classes","text":"<ul> <li><code>anytype.Anytype</code></li> <li><code>anytype.Space</code></li> <li><code>anytype.ListView</code></li> <li><code>anytype.Object</code></li> <li><code>anytype.Type</code></li> <li><code>anytype.Property</code></li> <li><code>anytype.Tag</code></li> </ul>"},{"location":"api/anytype/","title":"<code>anytype.Anytype</code>","text":"<p>Used to interact with the Anytype API for authentication, retrieving spaces, creating spaces, and performing global searches. It provides methods to authenticate via a token, fetch spaces, create new spaces, and search for objects across spaces.</p> Source code in <code>anytype/anytype.py</code> <pre><code>class Anytype:\n    \"\"\"\n    Used to interact with the Anytype API for authentication, retrieving spaces, creating spaces, and performing global searches. It provides methods to authenticate via a token, fetch spaces, create new spaces, and search for objects across spaces.\n    \"\"\"\n\n    def __init__(self) -&gt; None:\n        self.app_name = \"\"\n        self.space_id = \"\"\n        self.api_key = \"\"\n        self.app_key = \"\"\n        self._apiEndpoints: apiEndpoints | None = None\n        self._headers = {}\n\n    def auth(self, force=False, callback=None) -&gt; None:\n        \"\"\"\n        Authenticates the user by retrieving or creating a session token. If the session token already exists, it validates the token. If not, the user will be prompted to enter a 4-digit code for authentication.\n\n        Parameters:\n            force (bool): If True, forces re-authentication even if a token already exists.\n            callback (callable): A callback function to retrieve the 4-digit code. If None, the user will be prompted to enter the code.\n\n        Returns:\n            None\n\n        Raises:\n            Raises an error if the authentication request or token validation fails.\n        \"\"\"\n        userdata = self._get_userdata_folder()\n        anytoken = os.path.join(userdata, \"any_token.json\")\n\n        if force and os.path.exists(anytoken):\n            os.remove(anytoken)\n\n        if self.app_name == \"\":\n            self.app_name = \"python-anytype-client\"\n\n        if os.path.exists(anytoken):\n            with open(anytoken) as f:\n                auth_json = json.load(f)\n            self.api_key = auth_json.get(\"api_key\")\n            if self._validate_token():\n                return\n\n        self._apiEndpoints = apiEndpoints()\n        display_code_response = self._apiEndpoints.displayCode()\n        challenge_id = display_code_response.get(\"challenge_id\")\n\n        if callback is None:\n            api_four_digit_code = input(\"Enter the 4 digit code: \")\n        else:\n            api_four_digit_code = callback()\n\n        token_response = self._apiEndpoints.getToken(challenge_id, api_four_digit_code)\n\n        with open(anytoken, \"w\") as file:\n            json.dump(token_response, file, indent=4)\n\n        self.api_key = token_response.get(\"api_key\")\n        self._validate_token()\n\n    def _validate_token(self) -&gt; bool:\n        self._headers = {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": f\"Bearer {self.api_key}\",\n        }\n        self._apiEndpoints = apiEndpoints(self._headers)\n        try:\n            self._apiEndpoints.getSpaces(0, 1)\n            return True\n        except Exception:\n            return False\n\n    def _get_userdata_folder(self) -&gt; str:\n        userdata = os.path.join(os.path.expanduser(\"~\"), \".anytype\")\n        if not os.path.exists(userdata):\n            os.makedirs(userdata)\n        if os.name == \"nt\":\n            os.system(f\"attrib +h {userdata}\")\n        return userdata\n\n    @requires_auth\n    def get_space(self, space: str | Space) -&gt; Space:\n        \"\"\"\n        Retrieve a specific space by its unique identifier.\n\n        Parameters:\n            space (str | Space): The unique id identifier of the space or the Space Class.\n\n        Returns:\n            Space: A `Space` instance representing the requested space.\n\n        Raises:\n            Exception: If the request to the API fails or the space is not found.\n        \"\"\"\n        if isinstance(space, Space):\n            spaceId = space.id\n        elif isinstance(space, str):\n            spaceId = space\n        else:\n            # not reached\n            raise Exception(\"Invalid space type\")\n\n        response = self._apiEndpoints.getSpace(spaceId)\n        data = response.get(\"space\", {})\n        return Space._from_api(self._apiEndpoints, data)\n\n    @requires_auth\n    def get_spaces(self, offset=0, limit=10) -&gt; list[Space]:\n        \"\"\"\n        Retrieves a list of spaces associated with the authenticated user.\n\n        Parameters:\n            offset (int, optional): The offset for pagination (default: 0).\n            limit (int, optional): The limit for the number of results (default: 10).\n\n        Returns:\n            A list of Space instances.\n\n        Raises:\n            Raises an error if the request to the API fails.\n        \"\"\"\n        response = self._apiEndpoints.getSpaces(offset, limit)\n        return [Space._from_api(self._apiEndpoints, data) for data in response.get(\"data\", [])]\n\n    @requires_auth\n    def create_space(self, name: str) -&gt; Space:\n        \"\"\"\n        Creates a new space with a given name.\n\n        Parameters:\n            name (str): The name of the space to create.\n\n        Returns:\n            A Space instance representing the newly created space.\n\n        Raises:\n            Raises an error if the space creation request fails.\n        \"\"\"\n        response = self._apiEndpoints.createSpace(name)\n        data = response.get(\"space\", {})\n        return Space._from_api(self._apiEndpoints, data)\n\n    @requires_auth\n    def global_search(self, query, offset=0, limit=10) -&gt; list[Object]:\n        \"\"\"\n        Performs a global search for objects across all spaces using a query string.\n\n        Parameters:\n            query (str): The search query string.\n            offset (int, optional): The offset for pagination (default: 0).\n            limit (int, optional): The limit for the number of results (default: 10).\n\n        Returns:\n            A list of Object instances that match the search query.\n\n        Raises:\n            Raises an error if the search request fails.\n        \"\"\"\n        response = self._apiEndpoints.globalSearch(query, offset, limit)\n        return [Object._from_api(self._apiEndpoints, data) for data in response.get(\"data\", [])]\n</code></pre>"},{"location":"api/anytype/#anytype.Anytype.auth","title":"<code>auth(force=False, callback=None)</code>","text":"<p>Authenticates the user by retrieving or creating a session token. If the session token already exists, it validates the token. If not, the user will be prompted to enter a 4-digit code for authentication.</p> <p>Parameters:</p> Name Type Description Default <code>force</code> <code>bool</code> <p>If True, forces re-authentication even if a token already exists.</p> <code>False</code> <code>callback</code> <code>callable</code> <p>A callback function to retrieve the 4-digit code. If None, the user will be prompted to enter the code.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>anytype/anytype.py</code> <pre><code>def auth(self, force=False, callback=None) -&gt; None:\n    \"\"\"\n    Authenticates the user by retrieving or creating a session token. If the session token already exists, it validates the token. If not, the user will be prompted to enter a 4-digit code for authentication.\n\n    Parameters:\n        force (bool): If True, forces re-authentication even if a token already exists.\n        callback (callable): A callback function to retrieve the 4-digit code. If None, the user will be prompted to enter the code.\n\n    Returns:\n        None\n\n    Raises:\n        Raises an error if the authentication request or token validation fails.\n    \"\"\"\n    userdata = self._get_userdata_folder()\n    anytoken = os.path.join(userdata, \"any_token.json\")\n\n    if force and os.path.exists(anytoken):\n        os.remove(anytoken)\n\n    if self.app_name == \"\":\n        self.app_name = \"python-anytype-client\"\n\n    if os.path.exists(anytoken):\n        with open(anytoken) as f:\n            auth_json = json.load(f)\n        self.api_key = auth_json.get(\"api_key\")\n        if self._validate_token():\n            return\n\n    self._apiEndpoints = apiEndpoints()\n    display_code_response = self._apiEndpoints.displayCode()\n    challenge_id = display_code_response.get(\"challenge_id\")\n\n    if callback is None:\n        api_four_digit_code = input(\"Enter the 4 digit code: \")\n    else:\n        api_four_digit_code = callback()\n\n    token_response = self._apiEndpoints.getToken(challenge_id, api_four_digit_code)\n\n    with open(anytoken, \"w\") as file:\n        json.dump(token_response, file, indent=4)\n\n    self.api_key = token_response.get(\"api_key\")\n    self._validate_token()\n</code></pre>"},{"location":"api/anytype/#anytype.Anytype.create_space","title":"<code>create_space(name)</code>","text":"<p>Creates a new space with a given name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the space to create.</p> required <p>Returns:</p> Type Description <code>Space</code> <p>A Space instance representing the newly created space.</p> Source code in <code>anytype/anytype.py</code> <pre><code>@requires_auth\ndef create_space(self, name: str) -&gt; Space:\n    \"\"\"\n    Creates a new space with a given name.\n\n    Parameters:\n        name (str): The name of the space to create.\n\n    Returns:\n        A Space instance representing the newly created space.\n\n    Raises:\n        Raises an error if the space creation request fails.\n    \"\"\"\n    response = self._apiEndpoints.createSpace(name)\n    data = response.get(\"space\", {})\n    return Space._from_api(self._apiEndpoints, data)\n</code></pre>"},{"location":"api/anytype/#anytype.Anytype.get_space","title":"<code>get_space(space)</code>","text":"<p>Retrieve a specific space by its unique identifier.</p> <p>Parameters:</p> Name Type Description Default <code>space</code> <code>str | Space</code> <p>The unique id identifier of the space or the Space Class.</p> required <p>Returns:</p> Name Type Description <code>Space</code> <code>Space</code> <p>A <code>Space</code> instance representing the requested space.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the request to the API fails or the space is not found.</p> Source code in <code>anytype/anytype.py</code> <pre><code>@requires_auth\ndef get_space(self, space: str | Space) -&gt; Space:\n    \"\"\"\n    Retrieve a specific space by its unique identifier.\n\n    Parameters:\n        space (str | Space): The unique id identifier of the space or the Space Class.\n\n    Returns:\n        Space: A `Space` instance representing the requested space.\n\n    Raises:\n        Exception: If the request to the API fails or the space is not found.\n    \"\"\"\n    if isinstance(space, Space):\n        spaceId = space.id\n    elif isinstance(space, str):\n        spaceId = space\n    else:\n        # not reached\n        raise Exception(\"Invalid space type\")\n\n    response = self._apiEndpoints.getSpace(spaceId)\n    data = response.get(\"space\", {})\n    return Space._from_api(self._apiEndpoints, data)\n</code></pre>"},{"location":"api/anytype/#anytype.Anytype.get_spaces","title":"<code>get_spaces(offset=0, limit=10)</code>","text":"<p>Retrieves a list of spaces associated with the authenticated user.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The offset for pagination (default: 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The limit for the number of results (default: 10).</p> <code>10</code> <p>Returns:</p> Type Description <code>list[Space]</code> <p>A list of Space instances.</p> Source code in <code>anytype/anytype.py</code> <pre><code>@requires_auth\ndef get_spaces(self, offset=0, limit=10) -&gt; list[Space]:\n    \"\"\"\n    Retrieves a list of spaces associated with the authenticated user.\n\n    Parameters:\n        offset (int, optional): The offset for pagination (default: 0).\n        limit (int, optional): The limit for the number of results (default: 10).\n\n    Returns:\n        A list of Space instances.\n\n    Raises:\n        Raises an error if the request to the API fails.\n    \"\"\"\n    response = self._apiEndpoints.getSpaces(offset, limit)\n    return [Space._from_api(self._apiEndpoints, data) for data in response.get(\"data\", [])]\n</code></pre>"},{"location":"api/anytype/#anytype.Anytype.global_search","title":"<code>global_search(query, offset=0, limit=10)</code>","text":"<p>Performs a global search for objects across all spaces using a query string.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>The search query string.</p> required <code>offset</code> <code>int</code> <p>The offset for pagination (default: 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The limit for the number of results (default: 10).</p> <code>10</code> <p>Returns:</p> Type Description <code>list[Object]</code> <p>A list of Object instances that match the search query.</p> Source code in <code>anytype/anytype.py</code> <pre><code>@requires_auth\ndef global_search(self, query, offset=0, limit=10) -&gt; list[Object]:\n    \"\"\"\n    Performs a global search for objects across all spaces using a query string.\n\n    Parameters:\n        query (str): The search query string.\n        offset (int, optional): The offset for pagination (default: 0).\n        limit (int, optional): The limit for the number of results (default: 10).\n\n    Returns:\n        A list of Object instances that match the search query.\n\n    Raises:\n        Raises an error if the search request fails.\n    \"\"\"\n    response = self._apiEndpoints.globalSearch(query, offset, limit)\n    return [Object._from_api(self._apiEndpoints, data) for data in response.get(\"data\", [])]\n</code></pre>"},{"location":"api/listview/","title":"<code>anytype.ListView</code>","text":"<p>               Bases: <code>APIWrapper</code></p> Source code in <code>anytype/listview.py</code> <pre><code>class ListView(APIWrapper):\n    def __init__(self):\n        self._apiEndpoints: apiEndpoints | None = None\n        self.space_id = \"\"\n        self.list_id = \"\"\n        self.id = \"\"\n        self.name = \"\"\n\n    @requires_auth\n    def get_objectsinlistview(self, offset=0, limit=100) -&gt; list[Object]:\n        \"\"\"\n        Retrieve a list of objects displayed in the current list view.\n\n        Sends a request to the API to fetch objects from a specific list view within a space,\n        using pagination parameters.\n\n        Parameters:\n            offset (int, optional): The starting index for pagination. Defaults to 0.\n            limit (int, optional): The maximum number of objects to retrieve. Defaults to 100.\n\n        Returns:\n            list[Object]: A list of Object instances parsed from the API response.\n        \"\"\"\n        response = self._apiEndpoints.getObjectsInList(\n            self.space_id, self.list_id, self.id, offset, limit\n        )\n\n        return [Object._from_api(self._apiEndpoints, data) for data in response.get(\"data\", [])]\n\n    def add_objectinlistview(self, obj: Object) -&gt; None:\n        \"\"\"\n        Add a one object to the current list view.\n\n        This method assumes the object are already created and adds them to the\n        current list view context in the space.\n\n        Parameters:\n            obj Object: One Object instances to be added to the list view.\n\n        Returns:\n            None\n\n        Raises:\n            Exception: If the API call to add objects to the list view fails.\n        \"\"\"\n        self.add_objectsinlistview([obj])\n\n    @requires_auth\n    def add_objectsinlistview(self, objs: list[Object]) -&gt; None:\n        \"\"\"\n        Add a list of objects to the current list view.\n\n        This method assumes the objects are already created and adds them to the\n        current list view context in the space.\n\n        Parameters:\n            objs (list[Object]): A list of Object instances to be added to the list view.\n\n        Returns:\n            None\n\n        Raises:\n            Exception: If the API call to add objects to the list view fails.\n        \"\"\"\n        id_lists = [obj.id for obj in objs]\n        payload = {\"objects\": id_lists}\n        response = self._apiEndpoints.addObjectsToList(self.space_id, self.list_id, payload)\n        # TODO: implement\n\n    @requires_auth\n    def delete_objectinlistview(self, obj: Object | str) -&gt; None:\n        \"\"\"\n        Remove an object from the current list view.\n\n        This does not delete the object from the space, only removes its association\n        with the specific list view.\n\n        Parameters:\n            obj (Object): The Object instance to be removed from the list view.\n\n        Returns:\n            None\n\n        Raises:\n            Exception: If the API call to remove the object from the list view fails.\n        \"\"\"\n        if isinstance(obj, Object):\n            objId = obj.id\n        else:\n            objId = obj\n        assert objId != \"\"\n        self._apiEndpoints.deleteObjectsFromList(self.space_id, self.list_id, objId)\n\n    def __repr__(self) -&gt; str:\n        return f\"&lt;ListView(name={self.name})&gt;\"\n</code></pre>"},{"location":"api/listview/#anytype.ListView.add_objectinlistview","title":"<code>add_objectinlistview(obj)</code>","text":"<p>Add a one object to the current list view.</p> <p>This method assumes the object are already created and adds them to the current list view context in the space.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Object</code> <p>One Object instances to be added to the list view.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the API call to add objects to the list view fails.</p> Source code in <code>anytype/listview.py</code> <pre><code>def add_objectinlistview(self, obj: Object) -&gt; None:\n    \"\"\"\n    Add a one object to the current list view.\n\n    This method assumes the object are already created and adds them to the\n    current list view context in the space.\n\n    Parameters:\n        obj Object: One Object instances to be added to the list view.\n\n    Returns:\n        None\n\n    Raises:\n        Exception: If the API call to add objects to the list view fails.\n    \"\"\"\n    self.add_objectsinlistview([obj])\n</code></pre>"},{"location":"api/listview/#anytype.ListView.add_objectsinlistview","title":"<code>add_objectsinlistview(objs)</code>","text":"<p>Add a list of objects to the current list view.</p> <p>This method assumes the objects are already created and adds them to the current list view context in the space.</p> <p>Parameters:</p> Name Type Description Default <code>objs</code> <code>list[Object]</code> <p>A list of Object instances to be added to the list view.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the API call to add objects to the list view fails.</p> Source code in <code>anytype/listview.py</code> <pre><code>@requires_auth\ndef add_objectsinlistview(self, objs: list[Object]) -&gt; None:\n    \"\"\"\n    Add a list of objects to the current list view.\n\n    This method assumes the objects are already created and adds them to the\n    current list view context in the space.\n\n    Parameters:\n        objs (list[Object]): A list of Object instances to be added to the list view.\n\n    Returns:\n        None\n\n    Raises:\n        Exception: If the API call to add objects to the list view fails.\n    \"\"\"\n    id_lists = [obj.id for obj in objs]\n    payload = {\"objects\": id_lists}\n    response = self._apiEndpoints.addObjectsToList(self.space_id, self.list_id, payload)\n</code></pre>"},{"location":"api/listview/#anytype.ListView.delete_objectinlistview","title":"<code>delete_objectinlistview(obj)</code>","text":"<p>Remove an object from the current list view.</p> <p>This does not delete the object from the space, only removes its association with the specific list view.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Object</code> <p>The Object instance to be removed from the list view.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the API call to remove the object from the list view fails.</p> Source code in <code>anytype/listview.py</code> <pre><code>@requires_auth\ndef delete_objectinlistview(self, obj: Object | str) -&gt; None:\n    \"\"\"\n    Remove an object from the current list view.\n\n    This does not delete the object from the space, only removes its association\n    with the specific list view.\n\n    Parameters:\n        obj (Object): The Object instance to be removed from the list view.\n\n    Returns:\n        None\n\n    Raises:\n        Exception: If the API call to remove the object from the list view fails.\n    \"\"\"\n    if isinstance(obj, Object):\n        objId = obj.id\n    else:\n        objId = obj\n    assert objId != \"\"\n    self._apiEndpoints.deleteObjectsFromList(self.space_id, self.list_id, objId)\n</code></pre>"},{"location":"api/listview/#anytype.ListView.get_objectsinlistview","title":"<code>get_objectsinlistview(offset=0, limit=100)</code>","text":"<p>Retrieve a list of objects displayed in the current list view.</p> <p>Sends a request to the API to fetch objects from a specific list view within a space, using pagination parameters.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The starting index for pagination. Defaults to 0.</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of objects to retrieve. Defaults to 100.</p> <code>100</code> <p>Returns:</p> Type Description <code>list[Object]</code> <p>list[Object]: A list of Object instances parsed from the API response.</p> Source code in <code>anytype/listview.py</code> <pre><code>@requires_auth\ndef get_objectsinlistview(self, offset=0, limit=100) -&gt; list[Object]:\n    \"\"\"\n    Retrieve a list of objects displayed in the current list view.\n\n    Sends a request to the API to fetch objects from a specific list view within a space,\n    using pagination parameters.\n\n    Parameters:\n        offset (int, optional): The starting index for pagination. Defaults to 0.\n        limit (int, optional): The maximum number of objects to retrieve. Defaults to 100.\n\n    Returns:\n        list[Object]: A list of Object instances parsed from the API response.\n    \"\"\"\n    response = self._apiEndpoints.getObjectsInList(\n        self.space_id, self.list_id, self.id, offset, limit\n    )\n\n    return [Object._from_api(self._apiEndpoints, data) for data in response.get(\"data\", [])]\n</code></pre>"},{"location":"api/object/","title":"<code>anytype.Object</code>","text":"<p>               Bases: <code>APIWrapper</code></p> <p>Represents an object within a specific space, allowing creation and manipulation of its properties. The object can be customized with various attributes such as <code>name</code>, <code>icon</code>, <code>body</code>, <code>description</code>, and more. This class provides methods to export objects and add different content types to the object body, such as titles, text, code blocks, checkboxes, and bullet points.</p>"},{"location":"api/object/#anytype.Object--important","title":"IMPORTANT","text":"<p>Certain properties of an object, such as:</p> <ul> <li><code>DOI</code> in a collection of articles;</li> <li><code>Release Year</code> in albums;</li> <li><code>Genre</code> in music collections;</li> <li><code>Author</code> in book collections;</li> <li><code>Publication Date</code> in documents;</li> <li><code>Rating</code> in review-based objects;</li> <li><code>Tags</code> in categorized objects;</li> </ul> <p>are accessible through the class properties. For example, if an object is created with a <code>Type</code> (e.g., <code>anytype.Type</code>) that includes a <code>DOI</code> property, the DOI URL can be set during the object creation using <code>Object.doi</code>.</p> <p>Note that these property names are derived from the corresponding name in the Anytype GUI. They are all lowercase with spaces replaced by underscores. For instance, a property called <code>Release Year</code> in the Anytype GUI will be accessed as <code>release_year</code> in the object, and a property called <code>Publication Date</code> will be accessed as <code>publication_date</code>.</p> Source code in <code>anytype/object.py</code> <pre><code>class Object(APIWrapper):\n    \"\"\"\n    Represents an object within a specific space, allowing creation and manipulation of its properties. The object can be customized with various attributes such as `name`, `icon`, `body`, `description`, and more. This class provides methods to export objects and add different content types to the object body, such as titles, text, code blocks, checkboxes, and bullet points.\n\n    ### IMPORTANT\n\n    Certain properties of an object, such as:\n\n    - `DOI` in a collection of articles;\n    - `Release Year` in albums;\n    - `Genre` in music collections;\n    - `Author` in book collections;\n    - `Publication Date` in documents;\n    - `Rating` in review-based objects;\n    - `Tags` in categorized objects;\n\n    are accessible through the class properties. For example, if an object is created with a `Type` (e.g., `anytype.Type`) that includes a `DOI` property, the DOI URL can be set during the object creation using `Object.doi`.\n\n    Note that these property names are derived from the corresponding name in the Anytype GUI. They are all lowercase with spaces replaced by underscores. For instance, a property called `Release Year` in the Anytype GUI will be accessed as `release_year` in the object, and a property called `Publication Date` will be accessed as `publication_date`.\n\n    \"\"\"\n\n    def __init__(self, name: str = \"\", type: Type | None = None):\n        self._apiEndpoints: apiEndpoints | None = None\n        self._icon: Icon = Icon()\n        self._values: dict = {}\n        self.type: None | Type = None\n        self.type_key: str = \"\"\n\n        self.id: str = \"\"\n        self.source: str = \"\"\n        self.name: str = name\n        self.body: str = \"\"\n        self.description: str = \"\"\n        self.details = []\n        self.layout: str = \"basic\"\n\n        self.properties: dict = {}\n        if type is not None:\n            for prop in type.properties:\n                if prop.key not in _ANYTYPE_SYSTEM_RELATIONS:\n                    self.properties[prop.name] = prop\n            self.type = type\n\n        self.root_id: str = \"\"\n        self.space_id: str = \"\"\n        self.template_id: str = \"\"\n\n    @property\n    def icon(self):\n        return self._icon\n\n    @icon.setter\n    def icon(self, value):\n        if isinstance(value, dict):\n            new_icon = Icon()\n            new_icon._update_with_json(value)\n            self._icon = new_icon\n        elif isinstance(value, str):\n            # This is from chatgpt, please report is you know about emoji encode\n            emoji_pattern = re.compile(\n                \"[\\U0001f600-\\U0001f64f\"  # Emoticons\n                \"\\U0001f300-\\U0001f5ff\"  # Misc Symbols and Pictographs\n                \"\\U0001f680-\\U0001f6ff\"  # Transport &amp; Map Symbols\n                \"\\U0001f1e0-\\U0001f1ff\"  # Regional Indicator Symbols\n                \"\\U00002702-\\U000027b0\"  # Dingbats\n                \"\\U000024c2-\\U0001f251\"  # Enclosed characters and others\n                \"\\U0001f900-\\U0001f9ff\"  # Supplemental Symbols and Pictographs (includes \ud83e\udd2f)\n                \"]+\",\n                flags=re.UNICODE,\n            )\n\n            if bool(emoji_pattern.fullmatch(value)):\n                self._icon.emoji = value\n            else:\n                raise Exception(f\"Invalid icon format {value}\")\n        elif isinstance(value, Icon):\n            self._icon = value\n        elif value is None:\n            self._icon = Icon(\"\")\n        else:\n            raise Exception(\"Invalid icon format\")\n\n    @icon.getter\n    def icon(self):\n        return self._icon\n\n    def add_type(self, type: Type):\n        \"\"\"\n        Adds a type for an Object.\n\n        Parameters:\n            type (anytype.Type): Type from the space retrieved using `space.get_types()[0]`, `space.get_type(type)`, `space.get_type_byname(\"Articles\")`\n\n        \"\"\"\n        self.template_id = type.template_id\n        self.type_key = type.key\n\n    def add_title1(self, text) -&gt; None:\n        \"\"\"\n        Adds a level 1 title to the object's body.\n\n        Parameters:\n            text (str): The text to be added as a level 1 title.\n\n        \"\"\"\n        self.body += f\"# {text}\\n\"\n\n    def add_title2(self, text) -&gt; None:\n        \"\"\"\n        Adds a level 2 title to the object's body.\n\n        Parameters:\n            text (str): The text to be added as a level 2 title.\n\n        \"\"\"\n        self.body += f\"## {text}\\n\"\n\n    def add_title3(self, text) -&gt; None:\n        \"\"\"\n        Adds a level 3 title to the object's body.\n\n        Parameters:\n            text (str): The text to be added as a level 3 title.\n\n        \"\"\"\n        self.body += f\"### {text}\\n\"\n\n    def add_text(self, text) -&gt; None:\n        \"\"\"\n        Adds plain text to the object's body.\n\n        Parameters:\n            text (str): The text to be added.\n\n        \"\"\"\n        self.body += f\"{text}\\n\"\n\n    def add_codeblock(self, code, language=\"\") -&gt; None:\n        \"\"\"\n        Adds a code block to the object's body.\n\n        Parameters:\n            code (str): The code to be added.\n            language (str, optional): The programming language of the code block. Default is an empty string.\n\n        \"\"\"\n        self.body += f\"``` {language}\\n{code}\\n```\\n\"\n\n    def add_bullet(self, text) -&gt; None:\n        \"\"\"\n        Adds a bullet point to the object's body.\n\n        Parameters:\n            text (str): The text to be added as a bullet point.\n\n        \"\"\"\n        self.body += f\"- {text}\\n\"\n\n    def add_checkbox(self, text, checked=False) -&gt; None:\n        \"\"\"\n        Adds a checkbox to the object's body.\n\n        Parameters:\n            text (str): The text to be added next to the checkbox.\n            checked (bool, optional): Whether the checkbox is checked. Default is False.\n\n        \"\"\"\n        self.body += f\"- [x] {text}\\n\" if checked else f\"- [ ] {text}\\n\"\n\n    def add_image(self, image_url: str, alt: str = \"\", title: str = \"\") -&gt; None:\n        \"\"\"\n        Adds an image to the object's body.\n\n        Parameters:\n            image_url (str): The URL of the image.\n            alt (str, optional): The alternative text for the image. Default is an empty string.\n            title (str, optional): The title of the image. Default is an empty string.\n\n        \"\"\"\n        if title:\n            self.body += f'![{alt}]({image_url} \"{title}\")\\n'\n        else:\n            self.body += f\"![{alt}]({image_url})\\n\"\n\n    def __repr__(self):\n        if self.type:\n            if self.type.name != \"\":\n                return f\"&lt;Object(name={self.name}, type={self.type.name})&gt;\"\n            else:\n                return f\"&lt;Object(name={self.name})&gt;\"\n        else:\n            return f\"&lt;Object(name={self.name})&gt;\"\n</code></pre>"},{"location":"api/object/#anytype.Object.add_bullet","title":"<code>add_bullet(text)</code>","text":"<p>Adds a bullet point to the object's body.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to be added as a bullet point.</p> required Source code in <code>anytype/object.py</code> <pre><code>def add_bullet(self, text) -&gt; None:\n    \"\"\"\n    Adds a bullet point to the object's body.\n\n    Parameters:\n        text (str): The text to be added as a bullet point.\n\n    \"\"\"\n    self.body += f\"- {text}\\n\"\n</code></pre>"},{"location":"api/object/#anytype.Object.add_checkbox","title":"<code>add_checkbox(text, checked=False)</code>","text":"<p>Adds a checkbox to the object's body.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to be added next to the checkbox.</p> required <code>checked</code> <code>bool</code> <p>Whether the checkbox is checked. Default is False.</p> <code>False</code> Source code in <code>anytype/object.py</code> <pre><code>def add_checkbox(self, text, checked=False) -&gt; None:\n    \"\"\"\n    Adds a checkbox to the object's body.\n\n    Parameters:\n        text (str): The text to be added next to the checkbox.\n        checked (bool, optional): Whether the checkbox is checked. Default is False.\n\n    \"\"\"\n    self.body += f\"- [x] {text}\\n\" if checked else f\"- [ ] {text}\\n\"\n</code></pre>"},{"location":"api/object/#anytype.Object.add_codeblock","title":"<code>add_codeblock(code, language='')</code>","text":"<p>Adds a code block to the object's body.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>The code to be added.</p> required <code>language</code> <code>str</code> <p>The programming language of the code block. Default is an empty string.</p> <code>''</code> Source code in <code>anytype/object.py</code> <pre><code>def add_codeblock(self, code, language=\"\") -&gt; None:\n    \"\"\"\n    Adds a code block to the object's body.\n\n    Parameters:\n        code (str): The code to be added.\n        language (str, optional): The programming language of the code block. Default is an empty string.\n\n    \"\"\"\n    self.body += f\"``` {language}\\n{code}\\n```\\n\"\n</code></pre>"},{"location":"api/object/#anytype.Object.add_image","title":"<code>add_image(image_url, alt='', title='')</code>","text":"<p>Adds an image to the object's body.</p> <p>Parameters:</p> Name Type Description Default <code>image_url</code> <code>str</code> <p>The URL of the image.</p> required <code>alt</code> <code>str</code> <p>The alternative text for the image. Default is an empty string.</p> <code>''</code> <code>title</code> <code>str</code> <p>The title of the image. Default is an empty string.</p> <code>''</code> Source code in <code>anytype/object.py</code> <pre><code>def add_image(self, image_url: str, alt: str = \"\", title: str = \"\") -&gt; None:\n    \"\"\"\n    Adds an image to the object's body.\n\n    Parameters:\n        image_url (str): The URL of the image.\n        alt (str, optional): The alternative text for the image. Default is an empty string.\n        title (str, optional): The title of the image. Default is an empty string.\n\n    \"\"\"\n    if title:\n        self.body += f'![{alt}]({image_url} \"{title}\")\\n'\n    else:\n        self.body += f\"![{alt}]({image_url})\\n\"\n</code></pre>"},{"location":"api/object/#anytype.Object.add_text","title":"<code>add_text(text)</code>","text":"<p>Adds plain text to the object's body.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to be added.</p> required Source code in <code>anytype/object.py</code> <pre><code>def add_text(self, text) -&gt; None:\n    \"\"\"\n    Adds plain text to the object's body.\n\n    Parameters:\n        text (str): The text to be added.\n\n    \"\"\"\n    self.body += f\"{text}\\n\"\n</code></pre>"},{"location":"api/object/#anytype.Object.add_title1","title":"<code>add_title1(text)</code>","text":"<p>Adds a level 1 title to the object's body.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to be added as a level 1 title.</p> required Source code in <code>anytype/object.py</code> <pre><code>def add_title1(self, text) -&gt; None:\n    \"\"\"\n    Adds a level 1 title to the object's body.\n\n    Parameters:\n        text (str): The text to be added as a level 1 title.\n\n    \"\"\"\n    self.body += f\"# {text}\\n\"\n</code></pre>"},{"location":"api/object/#anytype.Object.add_title2","title":"<code>add_title2(text)</code>","text":"<p>Adds a level 2 title to the object's body.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to be added as a level 2 title.</p> required Source code in <code>anytype/object.py</code> <pre><code>def add_title2(self, text) -&gt; None:\n    \"\"\"\n    Adds a level 2 title to the object's body.\n\n    Parameters:\n        text (str): The text to be added as a level 2 title.\n\n    \"\"\"\n    self.body += f\"## {text}\\n\"\n</code></pre>"},{"location":"api/object/#anytype.Object.add_title3","title":"<code>add_title3(text)</code>","text":"<p>Adds a level 3 title to the object's body.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to be added as a level 3 title.</p> required Source code in <code>anytype/object.py</code> <pre><code>def add_title3(self, text) -&gt; None:\n    \"\"\"\n    Adds a level 3 title to the object's body.\n\n    Parameters:\n        text (str): The text to be added as a level 3 title.\n\n    \"\"\"\n    self.body += f\"### {text}\\n\"\n</code></pre>"},{"location":"api/object/#anytype.Object.add_type","title":"<code>add_type(type)</code>","text":"<p>Adds a type for an Object.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>Type</code> <p>Type from the space retrieved using <code>space.get_types()[0]</code>, <code>space.get_type(type)</code>, <code>space.get_type_byname(\"Articles\")</code></p> required Source code in <code>anytype/object.py</code> <pre><code>def add_type(self, type: Type):\n    \"\"\"\n    Adds a type for an Object.\n\n    Parameters:\n        type (anytype.Type): Type from the space retrieved using `space.get_types()[0]`, `space.get_type(type)`, `space.get_type_byname(\"Articles\")`\n\n    \"\"\"\n    self.template_id = type.template_id\n    self.type_key = type.key\n</code></pre>"},{"location":"api/property/","title":"Property","text":""},{"location":"api/property/#anytype.property.Checkbox","title":"<code>Checkbox</code>","text":"<p>               Bases: <code>Property</code></p> <p>Represents a checkbox (boolean) property.</p> Source code in <code>anytype/property.py</code> <pre><code>class Checkbox(Property):\n    \"\"\"\n    Represents a checkbox (boolean) property.\n    \"\"\"\n\n    def __init__(self, name: str = \"\"):\n        super().__init__(name)\n        self.format = \"checkbox\"\n        self.checkbox = False\n\n    def __repr__(self):\n        return f\"&lt;Checkbox({self.name})&gt;\"\n</code></pre>"},{"location":"api/property/#anytype.property.Date","title":"<code>Date</code>","text":"<p>               Bases: <code>Property</code></p> <p>Represents a date property (str DD/MM/YYYY or <code>datetime.datetime</code>).</p> Source code in <code>anytype/property.py</code> <pre><code>class Date(Property):\n    \"\"\"\n    Represents a date property (str DD/MM/YYYY or `datetime.datetime`).\n    \"\"\"\n\n    def __init__(self, name: str = \"\"):\n        super().__init__(name)\n        self.format = \"date\"\n        self.date = None\n\n    def __repr__(self):\n        return f\"&lt;Date({self.name})&gt;\"\n</code></pre>"},{"location":"api/property/#anytype.property.Email","title":"<code>Email</code>","text":"<p>               Bases: <code>Property</code></p> <p>Represents an email address property.</p> Source code in <code>anytype/property.py</code> <pre><code>class Email(Property):\n    \"\"\"\n    Represents an email address property.\n    \"\"\"\n\n    def __init__(self, name: str = \"\"):\n        super().__init__(name)\n        self.format = \"email\"\n        self.email = \"\"\n\n    def __repr__(self):\n        return f\"&lt;Email({self.name})&gt;\"\n</code></pre>"},{"location":"api/property/#anytype.property.Files","title":"<code>Files</code>","text":"<p>               Bases: <code>Property</code></p> <p>Represents a files property (not implemented yet).</p> Source code in <code>anytype/property.py</code> <pre><code>class Files(Property):\n    \"\"\"\n    Represents a files property (not implemented yet).\n    \"\"\"\n\n    def __init__(self, name: str = \"\"):\n        super().__init__(name)\n        self.format = \"files\"\n        self.files = None\n\n    def __repr__(self):\n        return f\"&lt;Files({self.name})&gt;\"\n</code></pre>"},{"location":"api/property/#anytype.property.MultiSelect","title":"<code>MultiSelect</code>","text":"<p>               Bases: <code>Property</code></p> <p>Represents a multi-select (multiple-choice) property using predefined tags.</p> <p>Methods:</p> Name Description <code>create_tag</code> <p>Creates a tag in the property.</p> <code>get_tags</code> <p>Fetches all tags associated with the property.</p> <code>get_tag</code> <p>Fetches a specific tag by ID.</p> Source code in <code>anytype/property.py</code> <pre><code>class MultiSelect(Property):\n    \"\"\"\n    Represents a multi-select (multiple-choice) property using predefined tags.\n\n    Methods:\n        create_tag(name, color, create_if_exists): Creates a tag in the property.\n        get_tags(): Fetches all tags associated with the property.\n        get_tag(tag_id): Fetches a specific tag by ID.\n    \"\"\"\n\n    def __init__(self, name: str = \"\"):\n        super().__init__(name)\n        self.format = \"multi_select\"\n        self.multi_select: list = []\n\n    @requires_auth\n    def create_tag(self, name: str, color: str = \"red\", create_if_exists: bool = False) -&gt; Tag:\n        \"\"\"\n        Creates a new tag with the specified name for a `anytype.PropertyFormat.SELECT` or `anytype.PropertyFormat.MULTI_SELECT` property.\n\n        Parameters:\n            name (str): The name of the tag to create.\n\n        Returns:\n            A Tag instance representing the created tag.\n\n        Raises:\n            Raises an error if the request to the API fails.\n        \"\"\"\n        data = {\"name\": name, \"color\": color}\n        if not create_if_exists:\n            for tag in self.get_tags():\n                if tag.name == name:\n                    warnings.warn(f\"Tag '{name}' already exists, returning existing tag\")\n                    return tag\n\n        response = self._apiEndpoints.createTag(self.space_id, self.id, data)\n        tag = Tag._from_api(self._apiEndpoints, response.get(\"tag\", []))\n        return tag\n\n    @requires_auth\n    def get_tags(self) -&gt; list[Tag]:\n        \"\"\"\n        Retrieves all tags associated with the property.\n\n        Returns:\n            A list of Tag instances representing the tags associated with the property.\n\n        Raises:\n            Raises an error if the request to the API fails.\n        \"\"\"\n        response = self._apiEndpoints.getTags(self.space_id, self.id)\n        types = [\n            Tag._from_api(\n                self._apiEndpoints, data | {\"space_id\": self.space_id, \"property_id\": self.id}\n            )\n            for data in response.get(\"data\", [])\n        ]\n        return types\n\n    @requires_auth\n    def get_tag(self, tag_id: str) -&gt; Tag:\n        \"\"\"\n        Retrieves a specific tag by its ID.\n\n        Parameters:\n            tag_id (str): The ID of the tag to retrieve.\n\n        Returns:\n            A Tag instance representing the retrieved tag.\n\n        Raises:\n            Raises an error if the request to the API fails.\n        \"\"\"\n        response = self._apiEndpoints.getTag(self.space_id, self.id, tag_id)\n        tag = Tag._from_api(self._apiEndpoints, response.get(\"tag\", []))\n        return tag\n\n    def __repr__(self):\n        return f\"&lt;MultiSelect({self.name})&gt;\"\n</code></pre>"},{"location":"api/property/#anytype.property.MultiSelect.create_tag","title":"<code>create_tag(name, color='red', create_if_exists=False)</code>","text":"<p>Creates a new tag with the specified name for a <code>anytype.PropertyFormat.SELECT</code> or <code>anytype.PropertyFormat.MULTI_SELECT</code> property.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the tag to create.</p> required <p>Returns:</p> Type Description <code>Tag</code> <p>A Tag instance representing the created tag.</p> Source code in <code>anytype/property.py</code> <pre><code>@requires_auth\ndef create_tag(self, name: str, color: str = \"red\", create_if_exists: bool = False) -&gt; Tag:\n    \"\"\"\n    Creates a new tag with the specified name for a `anytype.PropertyFormat.SELECT` or `anytype.PropertyFormat.MULTI_SELECT` property.\n\n    Parameters:\n        name (str): The name of the tag to create.\n\n    Returns:\n        A Tag instance representing the created tag.\n\n    Raises:\n        Raises an error if the request to the API fails.\n    \"\"\"\n    data = {\"name\": name, \"color\": color}\n    if not create_if_exists:\n        for tag in self.get_tags():\n            if tag.name == name:\n                warnings.warn(f\"Tag '{name}' already exists, returning existing tag\")\n                return tag\n\n    response = self._apiEndpoints.createTag(self.space_id, self.id, data)\n    tag = Tag._from_api(self._apiEndpoints, response.get(\"tag\", []))\n    return tag\n</code></pre>"},{"location":"api/property/#anytype.property.MultiSelect.get_tag","title":"<code>get_tag(tag_id)</code>","text":"<p>Retrieves a specific tag by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>tag_id</code> <code>str</code> <p>The ID of the tag to retrieve.</p> required <p>Returns:</p> Type Description <code>Tag</code> <p>A Tag instance representing the retrieved tag.</p> Source code in <code>anytype/property.py</code> <pre><code>@requires_auth\ndef get_tag(self, tag_id: str) -&gt; Tag:\n    \"\"\"\n    Retrieves a specific tag by its ID.\n\n    Parameters:\n        tag_id (str): The ID of the tag to retrieve.\n\n    Returns:\n        A Tag instance representing the retrieved tag.\n\n    Raises:\n        Raises an error if the request to the API fails.\n    \"\"\"\n    response = self._apiEndpoints.getTag(self.space_id, self.id, tag_id)\n    tag = Tag._from_api(self._apiEndpoints, response.get(\"tag\", []))\n    return tag\n</code></pre>"},{"location":"api/property/#anytype.property.MultiSelect.get_tags","title":"<code>get_tags()</code>","text":"<p>Retrieves all tags associated with the property.</p> <p>Returns:</p> Type Description <code>list[Tag]</code> <p>A list of Tag instances representing the tags associated with the property.</p> Source code in <code>anytype/property.py</code> <pre><code>@requires_auth\ndef get_tags(self) -&gt; list[Tag]:\n    \"\"\"\n    Retrieves all tags associated with the property.\n\n    Returns:\n        A list of Tag instances representing the tags associated with the property.\n\n    Raises:\n        Raises an error if the request to the API fails.\n    \"\"\"\n    response = self._apiEndpoints.getTags(self.space_id, self.id)\n    types = [\n        Tag._from_api(\n            self._apiEndpoints, data | {\"space_id\": self.space_id, \"property_id\": self.id}\n        )\n        for data in response.get(\"data\", [])\n    ]\n    return types\n</code></pre>"},{"location":"api/property/#anytype.property.Number","title":"<code>Number</code>","text":"<p>               Bases: <code>Property</code></p> <p>Represents a numeric property (integer or float).</p> Source code in <code>anytype/property.py</code> <pre><code>class Number(Property):\n    \"\"\"\n    Represents a numeric property (integer or float).\n    \"\"\"\n\n    def __init__(self, name: str = \"\"):\n        super().__init__(name)\n        self.format = \"number\"\n        self.number = 0\n\n    def __repr__(self):\n        return f\"&lt;Number({self.name})&gt;\"\n</code></pre>"},{"location":"api/property/#anytype.property.Objects","title":"<code>Objects</code>","text":"<p>               Bases: <code>Property</code></p> <p>Not implemented yet</p> Source code in <code>anytype/property.py</code> <pre><code>class Objects(Property):\n    \"\"\"\n    Not implemented yet\n    \"\"\"\n\n    def __init__(self, name: str = \"\"):\n        self.format = \"objects\"\n        super().__init__(name)\n        self.objects = []\n\n    def __repr__(self):\n        return f\"&lt;Objects({self.name})&gt;\"\n</code></pre>"},{"location":"api/property/#anytype.property.Phone","title":"<code>Phone</code>","text":"<p>               Bases: <code>Property</code></p> <p>Represents a phone number property.</p> Source code in <code>anytype/property.py</code> <pre><code>class Phone(Property):\n    \"\"\"\n    Represents a phone number property.\n    \"\"\"\n\n    def __init__(self, name: str = \"\"):\n        super().__init__(name)\n        self.format = \"phone\"\n        self.phone = \"\"\n\n    def __repr__(self):\n        return f\"&lt;Phone({self.name})&gt;\"\n</code></pre>"},{"location":"api/property/#anytype.property.Property","title":"<code>Property</code>","text":"<p>               Bases: <code>APIWrapper</code></p> <p>Base class for all property types in the system. Provides shared interface for accessing, setting, and serializing values to a JSON-compatible format for API communication.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the property.</p> <code>id</code> <code>str</code> <p>The unique identifier of the property.</p> <code>key</code> <code>str</code> <p>Internal key reference for the property (if applicable).</p> <code>format</code> <code>str</code> <p>Format/type of the property (e.g., \"text\", \"number\").</p> <code>space_id</code> <code>str</code> <p>Identifier for the space/environment this property belongs to.</p> <p>Methods:</p> Name Description <code>value </code> <p>Getter and setter for the property's value, dispatches by property type.</p> Source code in <code>anytype/property.py</code> <pre><code>class Property(APIWrapper):\n    \"\"\"\n    Base class for all property types in the system. Provides shared interface for accessing,\n    setting, and serializing values to a JSON-compatible format for API communication.\n\n    Attributes:\n        name (str): The name of the property.\n        id (str): The unique identifier of the property.\n        key (str): Internal key reference for the property (if applicable).\n        format (str): Format/type of the property (e.g., \"text\", \"number\").\n        space_id (str): Identifier for the space/environment this property belongs to.\n\n    Methods:\n        value (property): Getter and setter for the property's value, dispatches by property type.\n    \"\"\"\n\n    __slots__ = (\n        \"name\",\n        \"id\",\n        \"key\",\n        \"_apiEndpoints\",\n        \"_json\",\n        \"object\",\n        \"format\",\n        \"space_id\",\n    )\n\n    def __init__(self, name: str = \"\"):\n\n        self.id: str = \"\"\n        self.name: str = name\n\n    @requires_auth\n    def _get_json(self) -&gt; dict:\n        \"\"\"\n        Retrieves all properties associated with the property.\n\n        Returns:\n            A list of Property instances representing the properties associated with the property.\n\n        Raises:\n            Raises an error if the request to the API fails.\n        \"\"\"\n        response = self._apiEndpoints.getProperty(self.space_id, self.id)\n        json_dict = response.get(\"property\", {})\n        if isinstance(self, Checkbox):\n            json_dict[\"checkbox\"] = self.value\n        elif isinstance(self, Text):\n            json_dict[\"text\"] = self.value\n        elif isinstance(self, Number):\n            json_dict[\"number\"] = self.value\n        elif isinstance(self, Select):\n            all_tags = None  # self.get_tags()\n            if isinstance(self.select, Tag):\n                json_dict[\"select\"] = self.select.id\n            else:\n                if all_tags is None:\n                    all_tags = self.get_tags()\n                notfound = True\n                for found_tag in all_tags:\n                    if found_tag.name == self.select:\n                        json_dict[\"select\"] = found_tag.id\n                        notfound = False\n                        break\n                if notfound:\n                    random_color = random.choice(_ANYTYPE_PROPERTIES_COLORS)\n                    tag_obj = self.create_tag(self.select, random_color)\n                    warnings.warn(f\"Tag '{tag_obj.name}' not exist, creating it\")\n                    json_dict[\"select\"] = tag_obj.id\n        elif isinstance(self, MultiSelect):\n            tag_ids = []\n            all_tags = None  # self.get_tags()\n            for tag in self.multi_select:\n                if isinstance(tag, Tag):\n                    tag_ids.append(tag.id)\n                else:\n                    if all_tags is None:\n                        all_tags = self.get_tags()\n                    notfound = True\n                    for found_tag in all_tags:\n                        if found_tag.name == tag:\n                            tag_ids.append(found_tag.id)\n                            notfound = False\n                            break\n                    if notfound:\n                        random_color = random.choice(_ANYTYPE_PROPERTIES_COLORS)\n                        tag_obj = self.create_tag(tag, random_color)\n                        tag_ids.append(tag_obj.id)\n                        warnings.warn(f\"Tag '{tag_obj.name}' not exist, creating it\")\n\n            json_dict[\"multi_select\"] = tag_ids\n        elif isinstance(self, Date):\n            if self.value is None:\n                json_dict[\"date\"] = None\n            elif isinstance(self.value, str):\n                dt = datetime.datetime.strptime(self.date, \"%d/%m/%Y\")\n                json_dict[\"date\"] = dt.strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n            elif isinstance(self.value, datetime.datetime):\n                json_dict[\"date\"] = self.date.strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n        elif isinstance(self, Files):\n            json_dict[\"files\"] = self.value\n        elif isinstance(self, Url):\n            json_dict[\"url\"] = self.value\n        elif isinstance(self, Email):\n            json_dict[\"email\"] = self.value\n        elif isinstance(self, Phone):\n            json_dict[\"phone\"] = self.value\n        elif isinstance(self, Objects):\n            json_dict[\"objects\"] = self.value\n        else:\n            raise ValueError(\"Format not supported\")\n        return json_dict\n\n    @property\n    def value(self):\n        if isinstance(self, Checkbox):\n            return self.checkbox\n        elif isinstance(self, Text):\n            return self.text\n        elif isinstance(self, Number):\n            return self.number\n        elif isinstance(self, Select):\n            return self.select\n        elif isinstance(self, MultiSelect):\n            return self.multi_select\n        elif isinstance(self, Date):\n            return self.date\n        elif isinstance(self, Files):\n            return self.files\n        elif isinstance(self, Url):\n            return self.url\n        elif isinstance(self, Email):\n            return self.email\n        elif isinstance(self, Phone):\n            return self.phone\n        elif isinstance(self, Objects):\n            return self.objects\n        else:\n            raise ValueError(\"Format not supported\")\n\n    @value.setter\n    def value(self, value):\n        if isinstance(self, Checkbox):\n            if type(value) is bool:\n                self.checkbox = value\n            else:\n                raise ValueError(\"Value for Checkbox property must be boolean\")\n        elif isinstance(self, Text):\n            if type(value) is str:\n                self.text = value\n            else:\n                raise ValueError(\"Value for Text property must be string\")\n        elif isinstance(self, Number):\n            if type(value) is int or type(value) is float:\n                self.number = value\n            else:\n                raise ValueError(\"Value for Number property must be number\")\n        elif isinstance(self, Select):\n            if type(value) is str:\n                self.select = value\n            else:\n                raise ValueError(\"Value for Select property must be string\")\n        elif isinstance(self, MultiSelect):\n            if type(value) is list:\n                self.multi_select = value\n            else:\n                raise ValueError(\"Value for MultiSelect property must be list of strings\")\n        elif isinstance(self, Date):\n            if type(value) is str or type(value) is datetime.datetime:\n                self.date = value\n            else:\n                raise ValueError(\"Value for Date property must be string or datetime.datetime\")\n        elif isinstance(self, Files):\n            raise ValueError(\"Files are not implemented yet\")\n        elif isinstance(self, Url):\n            if type(value) is str:\n                self.url = value\n            else:\n                raise ValueError(\"Value for Url property must be string\")\n        elif isinstance(self, Email):\n            if isinstance(value, str):\n                self.email = value\n            else:\n                raise ValueError(\"Value for Email property must be string\")\n        elif isinstance(self, Phone):\n            if isinstance(value, str):\n                self.phone = value\n            else:\n                raise ValueError(\"Value for Phone property must be string\")\n        elif isinstance(self, Objects):\n            raise ValueError(\"Files are not implemented yet\")\n        else:\n            raise ValueError(\"Format not supported\")\n</code></pre>"},{"location":"api/property/#anytype.property.Select","title":"<code>Select</code>","text":"<p>               Bases: <code>Property</code></p> <p>Represents a select (single-choice) property using predefined tags.</p> <p>Methods:</p> Name Description <code>create_tag</code> <p>Creates a tag in the property.</p> <code>get_tags</code> <p>Fetches all tags associated with the property.</p> <code>get_tag</code> <p>Fetches a specific tag by ID.</p> Source code in <code>anytype/property.py</code> <pre><code>class Select(Property):\n    \"\"\"\n    Represents a select (single-choice) property using predefined tags.\n\n    Methods:\n        create_tag(name, color, create_if_exists): Creates a tag in the property.\n        get_tags(): Fetches all tags associated with the property.\n        get_tag(tag_id): Fetches a specific tag by ID.\n    \"\"\"\n\n    def __init__(self, name: str = \"\"):\n        super().__init__(name)\n        self.format = \"select\"\n        self.select = None\n\n    @requires_auth\n    def create_tag(self, name: str, color: str = \"red\", create_if_exists: bool = False) -&gt; Tag:\n        \"\"\"\n        Creates a new tag with the specified name for a `anytype.PropertyFormat.SELECT` or `anytype.PropertyFormat.MULTI_SELECT` property.\n\n        Parameters:\n            name (str): The name of the tag to create.\n\n        Returns:\n            A Tag instance representing the created tag.\n\n        Raises:\n            Raises an error if the request to the API fails.\n        \"\"\"\n        data = {\"name\": name, \"color\": color}\n        if not create_if_exists:\n            for tag in self.get_tags():\n                if tag.name == name:\n                    warnings.warn(f\"Tag '{name}' already exists, returning existing tag\")\n                    return tag\n\n        response = self._apiEndpoints.createTag(self.space_id, self.id, data)\n        tag = Tag._from_api(self._apiEndpoints, response.get(\"tag\", []))\n        return tag\n\n    @requires_auth\n    def get_tags(self) -&gt; list[Tag]:\n        \"\"\"\n        Retrieves all tags associated with the property.\n\n        Returns:\n            A list of Tag instances representing the tags associated with the property.\n\n        Raises:\n            Raises an error if the request to the API fails.\n        \"\"\"\n        response = self._apiEndpoints.getTags(self.space_id, self.id)\n        types = [\n            Tag._from_api(\n                self._apiEndpoints, data | {\"space_id\": self.space_id, \"property_id\": self.id}\n            )\n            for data in response.get(\"data\", [])\n        ]\n        return types\n\n    @requires_auth\n    def get_tag(self, tag_id: str) -&gt; Tag:\n        \"\"\"\n        Retrieves a specific tag by its ID.\n\n        Parameters:\n            tag_id (str): The ID of the tag to retrieve.\n\n        Returns:\n            A Tag instance representing the retrieved tag.\n\n        Raises:\n            Raises an error if the request to the API fails.\n        \"\"\"\n        response = self._apiEndpoints.getTag(self.space_id, self.id, tag_id)\n        tag = Tag._from_api(self._apiEndpoints, response.get(\"tag\", []))\n        return tag\n\n    def __repr__(self):\n        return f\"&lt;Select({self.name})&gt;\"\n</code></pre>"},{"location":"api/property/#anytype.property.Select.create_tag","title":"<code>create_tag(name, color='red', create_if_exists=False)</code>","text":"<p>Creates a new tag with the specified name for a <code>anytype.PropertyFormat.SELECT</code> or <code>anytype.PropertyFormat.MULTI_SELECT</code> property.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the tag to create.</p> required <p>Returns:</p> Type Description <code>Tag</code> <p>A Tag instance representing the created tag.</p> Source code in <code>anytype/property.py</code> <pre><code>@requires_auth\ndef create_tag(self, name: str, color: str = \"red\", create_if_exists: bool = False) -&gt; Tag:\n    \"\"\"\n    Creates a new tag with the specified name for a `anytype.PropertyFormat.SELECT` or `anytype.PropertyFormat.MULTI_SELECT` property.\n\n    Parameters:\n        name (str): The name of the tag to create.\n\n    Returns:\n        A Tag instance representing the created tag.\n\n    Raises:\n        Raises an error if the request to the API fails.\n    \"\"\"\n    data = {\"name\": name, \"color\": color}\n    if not create_if_exists:\n        for tag in self.get_tags():\n            if tag.name == name:\n                warnings.warn(f\"Tag '{name}' already exists, returning existing tag\")\n                return tag\n\n    response = self._apiEndpoints.createTag(self.space_id, self.id, data)\n    tag = Tag._from_api(self._apiEndpoints, response.get(\"tag\", []))\n    return tag\n</code></pre>"},{"location":"api/property/#anytype.property.Select.get_tag","title":"<code>get_tag(tag_id)</code>","text":"<p>Retrieves a specific tag by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>tag_id</code> <code>str</code> <p>The ID of the tag to retrieve.</p> required <p>Returns:</p> Type Description <code>Tag</code> <p>A Tag instance representing the retrieved tag.</p> Source code in <code>anytype/property.py</code> <pre><code>@requires_auth\ndef get_tag(self, tag_id: str) -&gt; Tag:\n    \"\"\"\n    Retrieves a specific tag by its ID.\n\n    Parameters:\n        tag_id (str): The ID of the tag to retrieve.\n\n    Returns:\n        A Tag instance representing the retrieved tag.\n\n    Raises:\n        Raises an error if the request to the API fails.\n    \"\"\"\n    response = self._apiEndpoints.getTag(self.space_id, self.id, tag_id)\n    tag = Tag._from_api(self._apiEndpoints, response.get(\"tag\", []))\n    return tag\n</code></pre>"},{"location":"api/property/#anytype.property.Select.get_tags","title":"<code>get_tags()</code>","text":"<p>Retrieves all tags associated with the property.</p> <p>Returns:</p> Type Description <code>list[Tag]</code> <p>A list of Tag instances representing the tags associated with the property.</p> Source code in <code>anytype/property.py</code> <pre><code>@requires_auth\ndef get_tags(self) -&gt; list[Tag]:\n    \"\"\"\n    Retrieves all tags associated with the property.\n\n    Returns:\n        A list of Tag instances representing the tags associated with the property.\n\n    Raises:\n        Raises an error if the request to the API fails.\n    \"\"\"\n    response = self._apiEndpoints.getTags(self.space_id, self.id)\n    types = [\n        Tag._from_api(\n            self._apiEndpoints, data | {\"space_id\": self.space_id, \"property_id\": self.id}\n        )\n        for data in response.get(\"data\", [])\n    ]\n    return types\n</code></pre>"},{"location":"api/property/#anytype.property.Text","title":"<code>Text</code>","text":"<p>               Bases: <code>Property</code></p> <p>Represents a text property.</p> Source code in <code>anytype/property.py</code> <pre><code>class Text(Property):\n    \"\"\"\n    Represents a text property.\n    \"\"\"\n\n    def __init__(self, name: str = \"\"):\n\n        super().__init__(name)\n        self.format = \"text\"\n        self.text = \"\"\n\n    @property\n    def value2(self):\n        pass\n\n    def __repr__(self):\n        return f\"&lt;Text({self.name})&gt;\"\n</code></pre>"},{"location":"api/property/#anytype.property.Url","title":"<code>Url</code>","text":"<p>               Bases: <code>Property</code></p> <p>Represents a URL property.</p> Source code in <code>anytype/property.py</code> <pre><code>class Url(Property):\n    \"\"\"\n    Represents a URL property.\n    \"\"\"\n\n    def __init__(self, name: str = \"\"):\n        super().__init__(name)\n        self.format = \"url\"\n        self.url = \"\"\n\n    def __repr__(self):\n        return f\"&lt;Url({self.name})&gt;\"\n</code></pre>"},{"location":"api/space/","title":"<code>anytype.Space</code>","text":"<p>               Bases: <code>APIWrapper</code></p> <p>Used to interact with and manage objects, types, and other elements within a specific Space. It provides methods to retrieve objects, types, and perform search operations within the space. Additionally, it allows creating new objects associated with specific types.</p> Source code in <code>anytype/space.py</code> <pre><code>class Space(APIWrapper):\n    \"\"\"\n    Used to interact with and manage objects, types, and other elements within a specific Space. It provides methods to retrieve objects, types, and perform search operations within the space. Additionally, it allows creating new objects associated with specific types.\n    \"\"\"\n\n    def __init__(self):\n        self._apiEndpoints: apiEndpoints | None = None\n        self.name = \"\"\n        self.id = \"\"\n        self._all_types = []\n\n    @requires_auth\n    def _object_to_dict(self, obj: Object) -&gt; dict:\n        if obj.type is None:\n            raise Exception(\n                \"You need to set one type for the object, use add_type method from the Object class\"\n            )\n        if type(obj.type) is dict:\n            obj.type = Type._from_api(self._apiEndpoints, obj.type)\n\n        if obj.type.key == \"\":\n            raise Exception(\n                \"Type has an invalid key, please retrieve it from the API to get a valid type\"\n            )\n\n        type_key = obj.type_key if obj.type_key != \"\" else obj.type.key\n        template_id = obj.template_id if obj.template_id != \"\" else obj.type.template_id\n        icon_json = {}\n        if isinstance(obj.icon, Icon):\n            icon_json = obj.icon._get_json()\n        else:\n            raise ValueError(\"Invalid icon type\")\n\n        properties_json: list[dict] = [{}]\n        if isinstance(obj.type.properties, list):\n            properties_json = [prop._get_json() for prop in obj.type.properties]\n        else:\n            raise ValueError(\"Invalid properties type\")\n\n        object_data = {\n            \"icon\": icon_json,\n            \"name\": obj.name,\n            \"description\": obj.description,\n            \"body\": obj.body,\n            \"source\": \"\",\n            \"template_id\": template_id,\n            \"type_key\": type_key,\n            \"properties\": properties_json,\n        }\n        return object_data\n\n    @requires_auth\n    def get_objects(self, offset=0, limit=100) -&gt; list[Object]:\n        \"\"\"\n        Retrieves a list of objects associated with the space.\n\n        Parameters:\n            offset (int, optional): The offset for pagination (default: 0).\n            limit (int, optional): The limit for the number of results (default: 100).\n\n        Returns:\n            A list of Object instances.\n\n        Raises:\n            Raises an error if the request to the API fails.\n        \"\"\"\n        response_data = self._apiEndpoints.getObjects(self.id, offset, limit)\n        objects = [\n            Object._from_api(self._apiEndpoints, data) for data in response_data.get(\"data\", [])\n        ]\n\n        return objects\n\n    @requires_auth\n    def get_object(self, obj: str | Object) -&gt; Object:\n        \"\"\"\n        Retrieves a specific object by its ID.\n\n        Parameters:\n            obj (Object | str): The object (or its ID) to retrieve.\n\n        Returns:\n            An Object instance representing the retrieved object.\n\n        Raises:\n            Raises an error if the request to the API fails.\n        \"\"\"\n        if isinstance(obj, Object):\n            objectId = obj.id\n        else:\n            objectId = obj\n        response = self._apiEndpoints.getObject(self.id, objectId)\n        data = response.get(\"object\", {})\n        return Object._from_api(self._apiEndpoints, data)\n\n    @requires_auth\n    def create_object(self, obj: Object, type: Type | None = None) -&gt; Object:\n        \"\"\"\n        Creates a new object within the space, associated with a specified type.\n\n        Parameters:\n            obj (Object): The Object instance to create.\n            type (Type): The Type instance to associate the object with.\n\n        Returns:\n            A new Object instance representing the created object.\n\n        Raises:\n            Raises an error if the request to the API fails.\n        \"\"\"\n        if obj.type is None and type is not None:\n            obj.type = type\n\n        obj_clone = deepcopy(obj)\n        obj_clone._apiEndpoints = self._apiEndpoints\n        obj_clone.space_id = self.id\n        object_data = self._object_to_dict(obj)\n\n        response = self._apiEndpoints.createObject(self.id, object_data)\n\n        for key, value in response.get(\"object\", {}).items():\n            setattr(obj_clone, key, value)\n        return obj_clone\n\n    @requires_auth\n    def update_object(self, obj: Object) -&gt; Object:\n        \"\"\"\n        Updates an existing object within the space.\n\n        Parameters:\n            obj (Object): The anytype.Object to be modified.\n\n        Returns:\n            An Object instance representing the updated object.\n\n        Raises:\n            Raises an error if the request to the API fails.\n        \"\"\"\n        data = self._object_to_dict(obj)\n        response = self._apiEndpoints.updateObject(self.id, obj.id, data)\n        data = response.get(\"object\", {})\n        return Object._from_api(self._apiEndpoints, data)\n\n    @requires_auth\n    def delete_object(self, obj: str | Object) -&gt; None:\n        \"\"\"\n        Attempt to delete an object by its unique identifier.\n\n        Parameters:\n            obj (Object | str): The Object or object ID string to delete.\n\n        Returns:\n            None\n\n        Raises:\n            Exception: If the request to delete the object fails.\n\n        \"\"\"\n        if isinstance(obj, Object):\n            obj = obj.id\n        self._apiEndpoints.deleteObject(self.id, obj)\n\n    @requires_auth\n    def create_type(self, type: Type) -&gt; Type:\n        \"\"\"\n        Create a new type within the current space.\n\n        This function validates the `Type` instance, ensures all required fields are\n        present (icon, layout, name, plural_name), and resolves all referenced\n        properties\u2014creating them if they don't already exist.\n\n        Parameters:\n            type (Type): The Type instance to be created, including its properties.\n\n        Returns:\n            Type: The created Type instance as returned by the API.\n\n        Raises:\n            Exception: If any of the required fields (icon, layout, name, plural_name)\n                       are missing.\n            ValueError: If a property has an invalid or unrecognized format.\n        \"\"\"\n\n        if not type.icon or not type.layout or not type.name or not type.plural_name:\n            raise Exception(\"Please define icon, layout, name and plural_name\")\n\n        defined_props = []\n        all_props = self.get_properties(offset=0, limit=200)\n        for prop in type.properties:\n            prop_name = prop.name if isinstance(prop, Property) else prop[\"name\"]\n            prop_format = prop.format if isinstance(prop, Property) else prop[\"format\"]\n            exists = False\n            for any_prop in all_props:\n                if any_prop.name == prop_name:\n                    exists = True\n                    prop = any_prop\n\n            if not exists:\n                prop = self.create_property(prop_name, prop_format)\n\n            if isinstance(prop, Property):\n                defined_props.append(prop._json)\n            elif isinstance(prop, dict):\n                defined_props.append(prop)\n            else:\n                raise ValueError(\"Invalid prop type, this should not happen, please report!\")\n\n        icon = type.icon._get_json()\n        data = {\n            \"name\": type.name,\n            \"plural_name\": type.plural_name,\n            \"icon\": icon,\n            \"layout\": type.layout,\n            \"properties\": defined_props,\n        }\n        response = self._apiEndpoints.createType(self.id, data)\n        type = Type._from_api(self._apiEndpoints, response.get(\"type\", {}) | {\"space_id\": self.id})\n        return type\n\n    @requires_auth\n    def update_type(self, type: Type) -&gt; Type:\n        \"\"\"\n        Update an existing type within the current space.\n\n        This function updates the specified `Type` instance, including its metadata and properties.\n        It ensures the type exists, validates the provided fields, and updates any referenced\n        properties as needed.\n\n        Parameters:\n            type (Type): The Type instance to be updated. Must include a valid `id`.\n\n        Returns:\n            Type: The updated Type instance as returned by the API.\n\n        Raises:\n            Exception: If the type does not exist, the ID is missing, or an API error occurs.\n            ValueError: If any updated fields or properties are invalid or unrecognized.\n        \"\"\"\n        if not type.icon or not type.layout or not type.name or not type.plural_name:\n            raise Exception(\"Please define icon, layout, name and plural_name\")\n\n        defined_props = []\n        all_props = self.get_properties(offset=0, limit=200)\n        for prop in type.properties:\n            prop_name = prop.name if isinstance(prop, Property) else prop[\"name\"]\n            prop_format = prop.format if isinstance(prop, Property) else prop[\"format\"]\n            exists = False\n            for any_prop in all_props:\n                if any_prop.name == prop_name:\n                    exists = True\n                    prop = any_prop\n\n            if not exists:\n                prop = self.create_property(prop_name, prop_format)\n                pass\n\n            if isinstance(prop, Property):\n                defined_props.append(prop._json)\n            elif isinstance(prop, dict):\n                defined_props.append(prop)\n            else:\n                raise ValueError(\"Invalid prop type, this should not happen, please report!\")\n\n        icon = type.icon._get_json()\n        data = {\n            \"name\": type.name,\n            \"plural_name\": type.plural_name,\n            \"icon\": icon,\n            \"layout\": type.layout,\n            \"properties\": defined_props,\n        }\n        response = self._apiEndpoints.updateType(self.id, type.id, data)\n        type = Type._from_api(self._apiEndpoints, response.get(\"type\", {}) | {\"space_id\": self.id})\n        return type\n\n    def delete_type(self, type: str | Type) -&gt; None:\n        \"\"\"\n        Delete an existing type from the current space.\n\n        This function deletes a type from the current space using its ID or a `Type` instance.\n        If a `Type` object is provided, its `id` is extracted. The deletion is performed via\n        the underlying API.\n\n        Parameters:\n            type (str | Type): The ID of the type to delete or a `Type` instance.\n\n        Returns:\n            None\n\n        Raises:\n            Exception: If the deletion fails due to an API error or invalid ID.\n        \"\"\"\n        if isinstance(type, Type):\n            typeId = type.id\n        else:\n            typeId = type\n        _ = self._apiEndpoints.deleteType(self.id, typeId)\n\n    @requires_auth\n    def get_type(self, type: str | Type) -&gt; Type:\n        \"\"\"\n        Retrieves a specific type by its ID.\n\n        Parameters:\n            type (str): The name of the type to retrieve.\n\n        Returns:\n            A Type instance representing the type.\n\n        Raises:\n            ValueError: If the type with the specified name is not found.\n        \"\"\"\n        if isinstance(type, Type):\n            typeId = type.id\n        else:\n            typeId = type\n\n        response = self._apiEndpoints.getType(self.id, typeId)\n        data = response.get(\"type\", {})\n        # TODO: Sometimes we need to add more attributes beyond the ones in the\n        # API response. There might be a cleaner way to do this, but doing\n        # a dict merge with | works for now.\n        return Type._from_api(self._apiEndpoints, data | {\"space_id\": self.id})\n\n    @requires_auth\n    def get_types(self, offset=0, limit=100) -&gt; list[Type]:\n        \"\"\"\n        Retrieves a list of types associated with the space.\n\n        Parameters:\n            offset (int, optional): The offset for pagination (default: 0).\n            limit (int, optional): The limit for the number of results (default: 100).\n\n        Returns:\n            A list of Type instances.\n\n        Raises:\n            Raises an error if the request to the API fails.\n        \"\"\"\n        response = self._apiEndpoints.getTypes(self.id, offset, limit)\n        types = [\n            Type._from_api(self._apiEndpoints, data | {\"space_id\": self.id})\n            for data in response.get(\"data\", [])\n        ]\n        return types\n\n    def get_type_byname(self, name: str) -&gt; Type:\n        offset = 0\n        limit = 5\n        while True:\n            types = self.get_types(offset=offset, limit=limit)\n            type_len = len(types)\n            for type in types:\n                if type.name == name:\n                    return type\n            if type_len &lt; limit:\n                break\n\n            offset += limit\n\n        raise ValueError(\"Type not found\")\n\n    @requires_auth\n    def get_member(self, member: str | Member) -&gt; Member:\n        if isinstance(member, Member):\n            memberId = member.id\n        else:\n            memberId = member\n\n        response = self._apiEndpoints.getMember(self.id, memberId)\n        data = response.get(\"object\", {})\n        return Member._from_api(self._apiEndpoints, data)\n\n    @requires_auth\n    def get_members(self, offset: int = 0, limit: int = 100) -&gt; list[Member]:\n        \"\"\"\n        Retrieves a list of members associated with the space.\n\n        Parameters:\n            offset (int, optional): The offset for pagination (default: 0).\n            limit (int, optional): The limit for the number of results (default: 100).\n\n        Returns:\n            A list of Member instances.\n\n        Raises:\n            Raises an error if the request to the API fails.\n        \"\"\"\n        response = self._apiEndpoints.getMembers(self.id, offset, limit)\n        return [Member._from_api(self._apiEndpoints, data) for data in response.get(\"data\", [])]\n\n    @requires_auth\n    def get_listviews(\n        self, listId: str | Object | Type, offset: int = 0, limit: int = 100\n    ) -&gt; list[ListView]:\n        if isinstance(listId, Object) or isinstance(listId, Type):\n            listId = listId.id\n\n        response = self._apiEndpoints.getListViews(self.id, listId, offset, limit)\n        return [\n            ListView._from_api(\n                self._apiEndpoints,\n                data\n                | {\n                    \"space_id\": self.id,\n                    \"list_id\": listId,\n                },\n            )\n            for data in response.get(\"data\", [])\n        ]\n\n    @requires_auth\n    def get_properties(self, offset=0, limit=100) -&gt; list[Property]:\n        \"\"\"\n        Retrieves a list of property associated with the space.\n\n        Parameters:\n            offset (int, optional): The offset for pagination (default: 0).\n            limit (int, optional): The limit for the number of results (default: 100).\n\n        Returns:\n            A list of Property instances.\n\n        Raises:\n            Raises an error if the request to the API fails.\n        \"\"\"\n        response = self._apiEndpoints.getProperties(self.id, offset, limit)\n        # types = [\n        #     Property._from_api(self._apiEndpoints, data | {\"space_id\": self.id})\n        #     for data in response.get(\"data\", [])\n        # ]\n\n        types = []\n        for data in response.get(\"data\", []):\n            prop = Property._from_api(self._apiEndpoints, data | {\"space_id\": self.id})\n            types.append(prop)\n\n        self._all_types = types\n        return types\n\n    @requires_auth\n    def create_property(self, prop: Property) -&gt; Property:\n        object_data = {\n            \"name\": prop.name,\n            \"format\": prop.format,\n        }\n        response = self._apiEndpoints.createProperty(self.id, object_data)\n        prop = Property._from_api(self._apiEndpoints, response.get(\"property\", {}))\n        return prop\n\n    @requires_auth\n    def get_property(self, prop: str | Property) -&gt; Property:\n        if isinstance(prop, Property):\n            propertyId = prop.id\n        else:\n            propertyId = prop\n\n        response = self._apiEndpoints.getProperty(self.id, propertyId)\n        data = response.get(\"property\", {})\n        prop = Property._from_api(self._apiEndpoints, data | {\"space_id\": self.id})\n        return prop\n\n    def get_property_bykey(self, key: str) -&gt; Property:\n        all_properties = self.get_properties(offset=0, limit=100)\n        offset = 0\n        limit = 50\n        while True:\n            for prop in all_properties:\n                if prop.key == key:\n                    return prop\n\n            if len(all_properties) &lt; 100:\n                break\n            else:\n                all_properties = self.get_properties(offset=offset, limit=limit)\n            offset += limit\n            limit += 100\n\n        # If we reach here, the property was not found\n        raise ValueError(\"Property not found, create it using create_property method\")\n\n    @requires_auth\n    def search(\n        self, query, type: Type | None = None, offset: int = 0, limit: int = 10\n    ) -&gt; list[Object]:\n        \"\"\"\n        Performs a search for objects in the space using a query string.\n\n        Parameters:\n            query (str): The search query string.\n            type (Type, optional): The type to filter by.\n            offset (int, optional): The offset for pagination (default: 0).\n            limit (int, optional): The limit for the number of results (default: 10).\n\n        Returns:\n            A list of Object instances that match the search query.\n\n        Raises:\n            ValueError: If the space ID is not set.\n        \"\"\"\n        if self.id == \"\":\n            raise ValueError(\"Space ID is required\")\n\n        types = []\n        if type is not None:\n            types = [type.key]\n        data = {\n            \"query\": query,\n            \"sort\": {\"direction\": \"desc\", \"property_key\": \"last_modified_date\"},\n            \"types\": types,\n        }\n        response = self._apiEndpoints.search(self.id, data, offset, limit)\n        return [Object._from_api(self._apiEndpoints, data) for data in response.get(\"data\", [])]\n\n    def __repr__(self):\n        return f\"&lt;Space(name={self.name})&gt;\"\n</code></pre>"},{"location":"api/space/#anytype.Space.create_object","title":"<code>create_object(obj, type=None)</code>","text":"<p>Creates a new object within the space, associated with a specified type.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Object</code> <p>The Object instance to create.</p> required <code>type</code> <code>Type</code> <p>The Type instance to associate the object with.</p> <code>None</code> <p>Returns:</p> Type Description <code>Object</code> <p>A new Object instance representing the created object.</p> Source code in <code>anytype/space.py</code> <pre><code>@requires_auth\ndef create_object(self, obj: Object, type: Type | None = None) -&gt; Object:\n    \"\"\"\n    Creates a new object within the space, associated with a specified type.\n\n    Parameters:\n        obj (Object): The Object instance to create.\n        type (Type): The Type instance to associate the object with.\n\n    Returns:\n        A new Object instance representing the created object.\n\n    Raises:\n        Raises an error if the request to the API fails.\n    \"\"\"\n    if obj.type is None and type is not None:\n        obj.type = type\n\n    obj_clone = deepcopy(obj)\n    obj_clone._apiEndpoints = self._apiEndpoints\n    obj_clone.space_id = self.id\n    object_data = self._object_to_dict(obj)\n\n    response = self._apiEndpoints.createObject(self.id, object_data)\n\n    for key, value in response.get(\"object\", {}).items():\n        setattr(obj_clone, key, value)\n    return obj_clone\n</code></pre>"},{"location":"api/space/#anytype.Space.create_type","title":"<code>create_type(type)</code>","text":"<p>Create a new type within the current space.</p> <p>This function validates the <code>Type</code> instance, ensures all required fields are present (icon, layout, name, plural_name), and resolves all referenced properties\u2014creating them if they don't already exist.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>Type</code> <p>The Type instance to be created, including its properties.</p> required <p>Returns:</p> Name Type Description <code>Type</code> <code>Type</code> <p>The created Type instance as returned by the API.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If any of the required fields (icon, layout, name, plural_name)        are missing.</p> <code>ValueError</code> <p>If a property has an invalid or unrecognized format.</p> Source code in <code>anytype/space.py</code> <pre><code>@requires_auth\ndef create_type(self, type: Type) -&gt; Type:\n    \"\"\"\n    Create a new type within the current space.\n\n    This function validates the `Type` instance, ensures all required fields are\n    present (icon, layout, name, plural_name), and resolves all referenced\n    properties\u2014creating them if they don't already exist.\n\n    Parameters:\n        type (Type): The Type instance to be created, including its properties.\n\n    Returns:\n        Type: The created Type instance as returned by the API.\n\n    Raises:\n        Exception: If any of the required fields (icon, layout, name, plural_name)\n                   are missing.\n        ValueError: If a property has an invalid or unrecognized format.\n    \"\"\"\n\n    if not type.icon or not type.layout or not type.name or not type.plural_name:\n        raise Exception(\"Please define icon, layout, name and plural_name\")\n\n    defined_props = []\n    all_props = self.get_properties(offset=0, limit=200)\n    for prop in type.properties:\n        prop_name = prop.name if isinstance(prop, Property) else prop[\"name\"]\n        prop_format = prop.format if isinstance(prop, Property) else prop[\"format\"]\n        exists = False\n        for any_prop in all_props:\n            if any_prop.name == prop_name:\n                exists = True\n                prop = any_prop\n\n        if not exists:\n            prop = self.create_property(prop_name, prop_format)\n\n        if isinstance(prop, Property):\n            defined_props.append(prop._json)\n        elif isinstance(prop, dict):\n            defined_props.append(prop)\n        else:\n            raise ValueError(\"Invalid prop type, this should not happen, please report!\")\n\n    icon = type.icon._get_json()\n    data = {\n        \"name\": type.name,\n        \"plural_name\": type.plural_name,\n        \"icon\": icon,\n        \"layout\": type.layout,\n        \"properties\": defined_props,\n    }\n    response = self._apiEndpoints.createType(self.id, data)\n    type = Type._from_api(self._apiEndpoints, response.get(\"type\", {}) | {\"space_id\": self.id})\n    return type\n</code></pre>"},{"location":"api/space/#anytype.Space.delete_object","title":"<code>delete_object(obj)</code>","text":"<p>Attempt to delete an object by its unique identifier.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Object | str</code> <p>The Object or object ID string to delete.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the request to delete the object fails.</p> Source code in <code>anytype/space.py</code> <pre><code>@requires_auth\ndef delete_object(self, obj: str | Object) -&gt; None:\n    \"\"\"\n    Attempt to delete an object by its unique identifier.\n\n    Parameters:\n        obj (Object | str): The Object or object ID string to delete.\n\n    Returns:\n        None\n\n    Raises:\n        Exception: If the request to delete the object fails.\n\n    \"\"\"\n    if isinstance(obj, Object):\n        obj = obj.id\n    self._apiEndpoints.deleteObject(self.id, obj)\n</code></pre>"},{"location":"api/space/#anytype.Space.delete_type","title":"<code>delete_type(type)</code>","text":"<p>Delete an existing type from the current space.</p> <p>This function deletes a type from the current space using its ID or a <code>Type</code> instance. If a <code>Type</code> object is provided, its <code>id</code> is extracted. The deletion is performed via the underlying API.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>str | Type</code> <p>The ID of the type to delete or a <code>Type</code> instance.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the deletion fails due to an API error or invalid ID.</p> Source code in <code>anytype/space.py</code> <pre><code>def delete_type(self, type: str | Type) -&gt; None:\n    \"\"\"\n    Delete an existing type from the current space.\n\n    This function deletes a type from the current space using its ID or a `Type` instance.\n    If a `Type` object is provided, its `id` is extracted. The deletion is performed via\n    the underlying API.\n\n    Parameters:\n        type (str | Type): The ID of the type to delete or a `Type` instance.\n\n    Returns:\n        None\n\n    Raises:\n        Exception: If the deletion fails due to an API error or invalid ID.\n    \"\"\"\n    if isinstance(type, Type):\n        typeId = type.id\n    else:\n        typeId = type\n    _ = self._apiEndpoints.deleteType(self.id, typeId)\n</code></pre>"},{"location":"api/space/#anytype.Space.get_members","title":"<code>get_members(offset=0, limit=100)</code>","text":"<p>Retrieves a list of members associated with the space.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The offset for pagination (default: 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The limit for the number of results (default: 100).</p> <code>100</code> <p>Returns:</p> Type Description <code>list[Member]</code> <p>A list of Member instances.</p> Source code in <code>anytype/space.py</code> <pre><code>@requires_auth\ndef get_members(self, offset: int = 0, limit: int = 100) -&gt; list[Member]:\n    \"\"\"\n    Retrieves a list of members associated with the space.\n\n    Parameters:\n        offset (int, optional): The offset for pagination (default: 0).\n        limit (int, optional): The limit for the number of results (default: 100).\n\n    Returns:\n        A list of Member instances.\n\n    Raises:\n        Raises an error if the request to the API fails.\n    \"\"\"\n    response = self._apiEndpoints.getMembers(self.id, offset, limit)\n    return [Member._from_api(self._apiEndpoints, data) for data in response.get(\"data\", [])]\n</code></pre>"},{"location":"api/space/#anytype.Space.get_object","title":"<code>get_object(obj)</code>","text":"<p>Retrieves a specific object by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Object | str</code> <p>The object (or its ID) to retrieve.</p> required <p>Returns:</p> Type Description <code>Object</code> <p>An Object instance representing the retrieved object.</p> Source code in <code>anytype/space.py</code> <pre><code>@requires_auth\ndef get_object(self, obj: str | Object) -&gt; Object:\n    \"\"\"\n    Retrieves a specific object by its ID.\n\n    Parameters:\n        obj (Object | str): The object (or its ID) to retrieve.\n\n    Returns:\n        An Object instance representing the retrieved object.\n\n    Raises:\n        Raises an error if the request to the API fails.\n    \"\"\"\n    if isinstance(obj, Object):\n        objectId = obj.id\n    else:\n        objectId = obj\n    response = self._apiEndpoints.getObject(self.id, objectId)\n    data = response.get(\"object\", {})\n    return Object._from_api(self._apiEndpoints, data)\n</code></pre>"},{"location":"api/space/#anytype.Space.get_objects","title":"<code>get_objects(offset=0, limit=100)</code>","text":"<p>Retrieves a list of objects associated with the space.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The offset for pagination (default: 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The limit for the number of results (default: 100).</p> <code>100</code> <p>Returns:</p> Type Description <code>list[Object]</code> <p>A list of Object instances.</p> Source code in <code>anytype/space.py</code> <pre><code>@requires_auth\ndef get_objects(self, offset=0, limit=100) -&gt; list[Object]:\n    \"\"\"\n    Retrieves a list of objects associated with the space.\n\n    Parameters:\n        offset (int, optional): The offset for pagination (default: 0).\n        limit (int, optional): The limit for the number of results (default: 100).\n\n    Returns:\n        A list of Object instances.\n\n    Raises:\n        Raises an error if the request to the API fails.\n    \"\"\"\n    response_data = self._apiEndpoints.getObjects(self.id, offset, limit)\n    objects = [\n        Object._from_api(self._apiEndpoints, data) for data in response_data.get(\"data\", [])\n    ]\n\n    return objects\n</code></pre>"},{"location":"api/space/#anytype.Space.get_properties","title":"<code>get_properties(offset=0, limit=100)</code>","text":"<p>Retrieves a list of property associated with the space.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The offset for pagination (default: 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The limit for the number of results (default: 100).</p> <code>100</code> <p>Returns:</p> Type Description <code>list[Property]</code> <p>A list of Property instances.</p> Source code in <code>anytype/space.py</code> <pre><code>@requires_auth\ndef get_properties(self, offset=0, limit=100) -&gt; list[Property]:\n    \"\"\"\n    Retrieves a list of property associated with the space.\n\n    Parameters:\n        offset (int, optional): The offset for pagination (default: 0).\n        limit (int, optional): The limit for the number of results (default: 100).\n\n    Returns:\n        A list of Property instances.\n\n    Raises:\n        Raises an error if the request to the API fails.\n    \"\"\"\n    response = self._apiEndpoints.getProperties(self.id, offset, limit)\n    # types = [\n    #     Property._from_api(self._apiEndpoints, data | {\"space_id\": self.id})\n    #     for data in response.get(\"data\", [])\n    # ]\n\n    types = []\n    for data in response.get(\"data\", []):\n        prop = Property._from_api(self._apiEndpoints, data | {\"space_id\": self.id})\n        types.append(prop)\n\n    self._all_types = types\n    return types\n</code></pre>"},{"location":"api/space/#anytype.Space.get_type","title":"<code>get_type(type)</code>","text":"<p>Retrieves a specific type by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>str</code> <p>The name of the type to retrieve.</p> required <p>Returns:</p> Type Description <code>Type</code> <p>A Type instance representing the type.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the type with the specified name is not found.</p> Source code in <code>anytype/space.py</code> <pre><code>@requires_auth\ndef get_type(self, type: str | Type) -&gt; Type:\n    \"\"\"\n    Retrieves a specific type by its ID.\n\n    Parameters:\n        type (str): The name of the type to retrieve.\n\n    Returns:\n        A Type instance representing the type.\n\n    Raises:\n        ValueError: If the type with the specified name is not found.\n    \"\"\"\n    if isinstance(type, Type):\n        typeId = type.id\n    else:\n        typeId = type\n\n    response = self._apiEndpoints.getType(self.id, typeId)\n    data = response.get(\"type\", {})\n    # TODO: Sometimes we need to add more attributes beyond the ones in the\n    # API response. There might be a cleaner way to do this, but doing\n    # a dict merge with | works for now.\n    return Type._from_api(self._apiEndpoints, data | {\"space_id\": self.id})\n</code></pre>"},{"location":"api/space/#anytype.Space.get_types","title":"<code>get_types(offset=0, limit=100)</code>","text":"<p>Retrieves a list of types associated with the space.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The offset for pagination (default: 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The limit for the number of results (default: 100).</p> <code>100</code> <p>Returns:</p> Type Description <code>list[Type]</code> <p>A list of Type instances.</p> Source code in <code>anytype/space.py</code> <pre><code>@requires_auth\ndef get_types(self, offset=0, limit=100) -&gt; list[Type]:\n    \"\"\"\n    Retrieves a list of types associated with the space.\n\n    Parameters:\n        offset (int, optional): The offset for pagination (default: 0).\n        limit (int, optional): The limit for the number of results (default: 100).\n\n    Returns:\n        A list of Type instances.\n\n    Raises:\n        Raises an error if the request to the API fails.\n    \"\"\"\n    response = self._apiEndpoints.getTypes(self.id, offset, limit)\n    types = [\n        Type._from_api(self._apiEndpoints, data | {\"space_id\": self.id})\n        for data in response.get(\"data\", [])\n    ]\n    return types\n</code></pre>"},{"location":"api/space/#anytype.Space.search","title":"<code>search(query, type=None, offset=0, limit=10)</code>","text":"<p>Performs a search for objects in the space using a query string.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>The search query string.</p> required <code>type</code> <code>Type</code> <p>The type to filter by.</p> <code>None</code> <code>offset</code> <code>int</code> <p>The offset for pagination (default: 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The limit for the number of results (default: 10).</p> <code>10</code> <p>Returns:</p> Type Description <code>list[Object]</code> <p>A list of Object instances that match the search query.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the space ID is not set.</p> Source code in <code>anytype/space.py</code> <pre><code>@requires_auth\ndef search(\n    self, query, type: Type | None = None, offset: int = 0, limit: int = 10\n) -&gt; list[Object]:\n    \"\"\"\n    Performs a search for objects in the space using a query string.\n\n    Parameters:\n        query (str): The search query string.\n        type (Type, optional): The type to filter by.\n        offset (int, optional): The offset for pagination (default: 0).\n        limit (int, optional): The limit for the number of results (default: 10).\n\n    Returns:\n        A list of Object instances that match the search query.\n\n    Raises:\n        ValueError: If the space ID is not set.\n    \"\"\"\n    if self.id == \"\":\n        raise ValueError(\"Space ID is required\")\n\n    types = []\n    if type is not None:\n        types = [type.key]\n    data = {\n        \"query\": query,\n        \"sort\": {\"direction\": \"desc\", \"property_key\": \"last_modified_date\"},\n        \"types\": types,\n    }\n    response = self._apiEndpoints.search(self.id, data, offset, limit)\n    return [Object._from_api(self._apiEndpoints, data) for data in response.get(\"data\", [])]\n</code></pre>"},{"location":"api/space/#anytype.Space.update_object","title":"<code>update_object(obj)</code>","text":"<p>Updates an existing object within the space.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Object</code> <p>The anytype.Object to be modified.</p> required <p>Returns:</p> Type Description <code>Object</code> <p>An Object instance representing the updated object.</p> Source code in <code>anytype/space.py</code> <pre><code>@requires_auth\ndef update_object(self, obj: Object) -&gt; Object:\n    \"\"\"\n    Updates an existing object within the space.\n\n    Parameters:\n        obj (Object): The anytype.Object to be modified.\n\n    Returns:\n        An Object instance representing the updated object.\n\n    Raises:\n        Raises an error if the request to the API fails.\n    \"\"\"\n    data = self._object_to_dict(obj)\n    response = self._apiEndpoints.updateObject(self.id, obj.id, data)\n    data = response.get(\"object\", {})\n    return Object._from_api(self._apiEndpoints, data)\n</code></pre>"},{"location":"api/space/#anytype.Space.update_type","title":"<code>update_type(type)</code>","text":"<p>Update an existing type within the current space.</p> <p>This function updates the specified <code>Type</code> instance, including its metadata and properties. It ensures the type exists, validates the provided fields, and updates any referenced properties as needed.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>Type</code> <p>The Type instance to be updated. Must include a valid <code>id</code>.</p> required <p>Returns:</p> Name Type Description <code>Type</code> <code>Type</code> <p>The updated Type instance as returned by the API.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the type does not exist, the ID is missing, or an API error occurs.</p> <code>ValueError</code> <p>If any updated fields or properties are invalid or unrecognized.</p> Source code in <code>anytype/space.py</code> <pre><code>@requires_auth\ndef update_type(self, type: Type) -&gt; Type:\n    \"\"\"\n    Update an existing type within the current space.\n\n    This function updates the specified `Type` instance, including its metadata and properties.\n    It ensures the type exists, validates the provided fields, and updates any referenced\n    properties as needed.\n\n    Parameters:\n        type (Type): The Type instance to be updated. Must include a valid `id`.\n\n    Returns:\n        Type: The updated Type instance as returned by the API.\n\n    Raises:\n        Exception: If the type does not exist, the ID is missing, or an API error occurs.\n        ValueError: If any updated fields or properties are invalid or unrecognized.\n    \"\"\"\n    if not type.icon or not type.layout or not type.name or not type.plural_name:\n        raise Exception(\"Please define icon, layout, name and plural_name\")\n\n    defined_props = []\n    all_props = self.get_properties(offset=0, limit=200)\n    for prop in type.properties:\n        prop_name = prop.name if isinstance(prop, Property) else prop[\"name\"]\n        prop_format = prop.format if isinstance(prop, Property) else prop[\"format\"]\n        exists = False\n        for any_prop in all_props:\n            if any_prop.name == prop_name:\n                exists = True\n                prop = any_prop\n\n        if not exists:\n            prop = self.create_property(prop_name, prop_format)\n            pass\n\n        if isinstance(prop, Property):\n            defined_props.append(prop._json)\n        elif isinstance(prop, dict):\n            defined_props.append(prop)\n        else:\n            raise ValueError(\"Invalid prop type, this should not happen, please report!\")\n\n    icon = type.icon._get_json()\n    data = {\n        \"name\": type.name,\n        \"plural_name\": type.plural_name,\n        \"icon\": icon,\n        \"layout\": type.layout,\n        \"properties\": defined_props,\n    }\n    response = self._apiEndpoints.updateType(self.id, type.id, data)\n    type = Type._from_api(self._apiEndpoints, response.get(\"type\", {}) | {\"space_id\": self.id})\n    return type\n</code></pre>"},{"location":"api/tag/","title":"<code>anytype.Tag</code>","text":"<p>               Bases: <code>APIWrapper</code></p> Source code in <code>anytype/tag.py</code> <pre><code>class Tag(APIWrapper):\n    def __init__(self):\n        self.space_id: str = \"\"\n        self._property_id: str = \"\"\n        self.color: str = \"\"\n        self.name: str = \"\"\n        self.id: str = \"\"\n        self.key: str = \"\"\n\n    @requires_auth\n    def update_tag(self, name: str, color: str = \"red\"):\n        \"\"\"\n        Updates the name of an existing tag.\n        Parameters:\n            tag_id (str): The ID of the tag to update.\n            name (str): The new name for the tag.\n        Returns:\n            A Tag instance representing the updated tag.\n        Raises:\n            Raises an error if the request to the API fails.\n        \"\"\"\n        data = {\"name\": name, \"color\": color}\n        response = self._apiEndpoints.updateTag(self.space_id, self._property_id, self.id, data)\n        tag = Tag._from_api(self._apiEndpoints, response.get(\"tag\", []))\n        return tag\n\n    @requires_auth\n    def delete_tag(self) -&gt; None:\n        \"\"\"\n        Deletes a tag by its ID.\n\n        Returns:\n            bool: True if the tag was successfully deleted, False otherwise.\n\n        Raises:\n            Raises an error if the request to the API fails.\n        \"\"\"\n        _ = self._apiEndpoints.deleteTag(self.space_id, self._property_id, self.id)\n\n    def __repr__(self):\n        return f\"&lt;Tag(name={self.name})&gt;\"\n</code></pre>"},{"location":"api/tag/#anytype.Tag.delete_tag","title":"<code>delete_tag()</code>","text":"<p>Deletes a tag by its ID.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>None</code> <p>True if the tag was successfully deleted, False otherwise.</p> Source code in <code>anytype/tag.py</code> <pre><code>@requires_auth\ndef delete_tag(self) -&gt; None:\n    \"\"\"\n    Deletes a tag by its ID.\n\n    Returns:\n        bool: True if the tag was successfully deleted, False otherwise.\n\n    Raises:\n        Raises an error if the request to the API fails.\n    \"\"\"\n    _ = self._apiEndpoints.deleteTag(self.space_id, self._property_id, self.id)\n</code></pre>"},{"location":"api/tag/#anytype.Tag.update_tag","title":"<code>update_tag(name, color='red')</code>","text":"<p>Updates the name of an existing tag. Parameters:     tag_id (str): The ID of the tag to update.     name (str): The new name for the tag. Returns:     A Tag instance representing the updated tag. Raises:     Raises an error if the request to the API fails.</p> Source code in <code>anytype/tag.py</code> <pre><code>@requires_auth\ndef update_tag(self, name: str, color: str = \"red\"):\n    \"\"\"\n    Updates the name of an existing tag.\n    Parameters:\n        tag_id (str): The ID of the tag to update.\n        name (str): The new name for the tag.\n    Returns:\n        A Tag instance representing the updated tag.\n    Raises:\n        Raises an error if the request to the API fails.\n    \"\"\"\n    data = {\"name\": name, \"color\": color}\n    response = self._apiEndpoints.updateTag(self.space_id, self._property_id, self.id, data)\n    tag = Tag._from_api(self._apiEndpoints, response.get(\"tag\", []))\n    return tag\n</code></pre>"},{"location":"api/type/","title":"<code>anytype.Type</code>","text":"<p>               Bases: <code>APIWrapper</code></p> <p>The Type class is used to interact with and manage templates in a specific space. It allows for retrieving available templates, setting a specific template for a type, and handling template-related actions within the space.</p> Source code in <code>anytype/type.py</code> <pre><code>class Type(APIWrapper):\n    \"\"\"\n    The Type class is used to interact with and manage templates in a specific space. It allows for retrieving available templates, setting a specific template for a type, and handling template-related actions within the space.\n    \"\"\"\n\n    def __init__(self, name: str = \"\"):\n        self._all_templates = []\n        self.type = \"\"\n        self.space_id = \"\"\n        self.id = \"\"\n        self.name = name\n        self.key = \"\"\n\n        # creation\n        self.layout: str = \"\"\n        self.plural_name: str = \"\"\n\n        self._icon: Icon | dict = {}\n        self._properties: list[Property | dict] = []\n        self._properties_value: list = []\n        self.template_id = \"\"\n\n        if name != \"\" and self._apiEndpoints:\n            self.set_template(name)\n\n    @property\n    def properties(self):\n        return self._properties\n\n    @properties.setter\n    def properties(self, value):\n        self._properties = []\n        self._properties_value = value\n\n    @properties.getter\n    def properties(self):\n        if len(self._properties) &gt; 0:\n            return self._properties\n\n        for prop in self._properties_value:\n            id = prop[\"id\"]\n            response = self._apiEndpoints.getProperty(self.space_id, id)\n            data = response.get(\"property\", {})\n            format = data[\"format\"]\n            if format == \"checkbox\":\n                prop = Checkbox._from_api(self._apiEndpoints, data | {\"space_id\": self.space_id})\n            elif format == \"text\":\n                prop = Text._from_api(self._apiEndpoints, data | {\"space_id\": self.space_id})\n            elif format == \"number\":\n                prop = Number._from_api(self._apiEndpoints, data | {\"space_id\": self.space_id})\n            elif format == \"select\":\n                prop = Select._from_api(self._apiEndpoints, data | {\"space_id\": self.space_id})\n            elif format == \"multi_select\":\n                prop = MultiSelect._from_api(self._apiEndpoints, data | {\"space_id\": self.space_id})\n            elif format == \"date\":\n                prop = Date._from_api(self._apiEndpoints, data | {\"space_id\": self.space_id})\n            elif format == \"files\":\n                prop = Files._from_api(self._apiEndpoints, data | {\"space_id\": self.space_id})\n            elif format == \"url\":\n                prop = Url._from_api(self._apiEndpoints, data | {\"space_id\": self.space_id})\n            elif format == \"email\":\n                prop = Email._from_api(self._apiEndpoints, data | {\"space_id\": self.space_id})\n            elif format == \"phone\":\n                prop = Phone._from_api(self._apiEndpoints, data | {\"space_id\": self.space_id})\n            elif format == \"objects\":\n                prop = Objects._from_api(self._apiEndpoints, data | {\"space_id\": self.space_id})\n            else:\n                raise Exception(\"Invalid format\")\n\n            if prop.key in _ANYTYPE_SYSTEM_RELATIONS:\n                continue\n            self._properties.append(prop)\n        return self._properties\n\n    @property\n    def icon(self):\n        return self._icon\n\n    @icon.setter\n    def icon(self, value):\n        if value is None:\n            self._icon = Icon()\n        elif isinstance(value, dict):\n            icon = Icon()\n            icon._update_with_json(value)\n            self._icon = icon\n        elif isinstance(value, Icon):\n            self._icon = value\n        else:\n            raise Exception(\"Invalid icon\")\n\n    @icon.getter\n    def icon(self):\n        return self._icon\n\n    @requires_auth\n    def get_templates(self, offset: int = 0, limit: int = 100) -&gt; list[Template]:\n        \"\"\"\n        Retrieves all templates associated with the type from the API.\n\n        Parameters:\n            offset (int): The offset to start retrieving templates (default: 0).\n            limit (int): The maximum number of templates to retrieve (default: 100).\n\n        Returns:\n            A list of Template objects.\n\n        Raises:\n            Raises an error if the request to the API fails.\n        \"\"\"\n        response = self._apiEndpoints.getTemplates(self.space_id, self.id, offset, limit)\n        self._all_templates = [\n            Template._from_api(self._apiEndpoints, data) for data in response.get(\"data\", [])\n        ]\n\n        return self._all_templates\n\n    def set_template(self, template_name: str) -&gt; None:\n        \"\"\"\n        Sets a template for the type by name. If no templates are loaded, it will first fetch all templates.\n\n        Parameters:\n            template_name (str): The name of the template to assign.\n\n        Returns:\n            None\n\n        Raises:\n            ValueError: If a template with the specified name is not found.\n        \"\"\"\n        if len(self._all_templates) == 0:\n            self.get_templates()\n\n        found = False\n        for template in self._all_templates:\n            if template.name == template_name:\n                found = True\n                self.template_id = template.id\n                return\n        if not found:\n            raise ValueError(f\"Type '{self.name}' does not have a template named '{template_name}'\")\n\n    @requires_auth\n    def get_template(self, id: str) -&gt; Template:\n        \"\"\"\n        Retrieve a specific template by its unique identifier.\n\n        Parameters:\n            id (str): The unique identifier of the template to retrieve.\n\n        Returns:\n            Template: A `Template` instance populated with data retrieved from the API.\n\n        Raises:\n            Exception: If the request to the API fails or the template cannot be retrieved.\n        \"\"\"\n        response_data = self._apiEndpoints.getTemplate(self.space_id, self.id, id)\n\n        template = Template()\n        template._apiEndpoints = self._apiEndpoints\n        for data in response_data.get(\"data\", []):\n            for key, value in data.items():\n                template.__dict__[key] = value\n\n        return template\n\n    def add_property(self, property: Property) -&gt; None:\n        \"\"\"\n        Add a property definition to the type being constructed.\n\n        If the API endpoints are not yet initialized (e.g., during local type definition),\n        the property is added to the internal property list. Otherwise, the method is not implemented.\n\n        Parameters:\n            property (Property): `anytype.Property` to be added.\n\n        Raises:\n            Exception: If the API endpoints are initialized, indicating this functionality\n                       is not yet supported in that context.\n        \"\"\"\n\n        if self._apiEndpoints is None:\n            prop = {\"format\": property.format, \"name\": property.name}  # or: property_format.value\n            self.properties.append(prop)\n        else:\n            raise Exception(\"Not implemented yet\")\n\n    def __repr__(self):\n        if self.icon:\n            if self.icon.format == \"emoji\":\n                return f\"&lt;Type(name={self.name}, icon={self.icon.emoji})&gt;\"\n            else:\n                return f\"&lt;Type(name={self.name}, icon={self.icon})&gt;\"\n        return f\"&lt;Type(name={self.name})&gt;\"\n</code></pre>"},{"location":"api/type/#anytype.Type.add_property","title":"<code>add_property(property)</code>","text":"<p>Add a property definition to the type being constructed.</p> <p>If the API endpoints are not yet initialized (e.g., during local type definition), the property is added to the internal property list. Otherwise, the method is not implemented.</p> <p>Parameters:</p> Name Type Description Default <code>property</code> <code>Property</code> <p><code>anytype.Property</code> to be added.</p> required <p>Raises:</p> Type Description <code>Exception</code> <p>If the API endpoints are initialized, indicating this functionality        is not yet supported in that context.</p> Source code in <code>anytype/type.py</code> <pre><code>def add_property(self, property: Property) -&gt; None:\n    \"\"\"\n    Add a property definition to the type being constructed.\n\n    If the API endpoints are not yet initialized (e.g., during local type definition),\n    the property is added to the internal property list. Otherwise, the method is not implemented.\n\n    Parameters:\n        property (Property): `anytype.Property` to be added.\n\n    Raises:\n        Exception: If the API endpoints are initialized, indicating this functionality\n                   is not yet supported in that context.\n    \"\"\"\n\n    if self._apiEndpoints is None:\n        prop = {\"format\": property.format, \"name\": property.name}  # or: property_format.value\n        self.properties.append(prop)\n    else:\n        raise Exception(\"Not implemented yet\")\n</code></pre>"},{"location":"api/type/#anytype.Type.get_template","title":"<code>get_template(id)</code>","text":"<p>Retrieve a specific template by its unique identifier.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The unique identifier of the template to retrieve.</p> required <p>Returns:</p> Name Type Description <code>Template</code> <code>Template</code> <p>A <code>Template</code> instance populated with data retrieved from the API.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the request to the API fails or the template cannot be retrieved.</p> Source code in <code>anytype/type.py</code> <pre><code>@requires_auth\ndef get_template(self, id: str) -&gt; Template:\n    \"\"\"\n    Retrieve a specific template by its unique identifier.\n\n    Parameters:\n        id (str): The unique identifier of the template to retrieve.\n\n    Returns:\n        Template: A `Template` instance populated with data retrieved from the API.\n\n    Raises:\n        Exception: If the request to the API fails or the template cannot be retrieved.\n    \"\"\"\n    response_data = self._apiEndpoints.getTemplate(self.space_id, self.id, id)\n\n    template = Template()\n    template._apiEndpoints = self._apiEndpoints\n    for data in response_data.get(\"data\", []):\n        for key, value in data.items():\n            template.__dict__[key] = value\n\n    return template\n</code></pre>"},{"location":"api/type/#anytype.Type.get_templates","title":"<code>get_templates(offset=0, limit=100)</code>","text":"<p>Retrieves all templates associated with the type from the API.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The offset to start retrieving templates (default: 0).</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of templates to retrieve (default: 100).</p> <code>100</code> <p>Returns:</p> Type Description <code>list[Template]</code> <p>A list of Template objects.</p> Source code in <code>anytype/type.py</code> <pre><code>@requires_auth\ndef get_templates(self, offset: int = 0, limit: int = 100) -&gt; list[Template]:\n    \"\"\"\n    Retrieves all templates associated with the type from the API.\n\n    Parameters:\n        offset (int): The offset to start retrieving templates (default: 0).\n        limit (int): The maximum number of templates to retrieve (default: 100).\n\n    Returns:\n        A list of Template objects.\n\n    Raises:\n        Raises an error if the request to the API fails.\n    \"\"\"\n    response = self._apiEndpoints.getTemplates(self.space_id, self.id, offset, limit)\n    self._all_templates = [\n        Template._from_api(self._apiEndpoints, data) for data in response.get(\"data\", [])\n    ]\n\n    return self._all_templates\n</code></pre>"},{"location":"api/type/#anytype.Type.set_template","title":"<code>set_template(template_name)</code>","text":"<p>Sets a template for the type by name. If no templates are loaded, it will first fetch all templates.</p> <p>Parameters:</p> Name Type Description Default <code>template_name</code> <code>str</code> <p>The name of the template to assign.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If a template with the specified name is not found.</p> Source code in <code>anytype/type.py</code> <pre><code>def set_template(self, template_name: str) -&gt; None:\n    \"\"\"\n    Sets a template for the type by name. If no templates are loaded, it will first fetch all templates.\n\n    Parameters:\n        template_name (str): The name of the template to assign.\n\n    Returns:\n        None\n\n    Raises:\n        ValueError: If a template with the specified name is not found.\n    \"\"\"\n    if len(self._all_templates) == 0:\n        self.get_templates()\n\n    found = False\n    for template in self._all_templates:\n        if template.name == template_name:\n            found = True\n            self.template_id = template.id\n            return\n    if not found:\n        raise ValueError(f\"Type '{self.name}' does not have a template named '{template_name}'\")\n</code></pre>"}]}